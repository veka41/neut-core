import {
  Ext,
  Magic,
  Mem,
  Word,
  this.bool,
  this.box,
  this.pointer {_Pointer, pointer, shift},
  this.unit {Unit, unit},
}

inline _embody(a: type, x: &a): a {
  *x
}

inline _thread-size(): int {
  let u = Word.size in
  add-int(mul-int(u, 3), 1)
}

nominal {
  _await-and-write-result(addr: pointer): unit,
  thread(_: type): type,
  attach(a: type, e: thread(a)): a,
}

resource _thread-inner {
  function (addr: int) {
    let u = Word.size in
    let elem-type = Magic.cast(int, type, Mem.load-int(_Pointer(add-int(addr, u)))) in
    let pr: thread(elem-type) = Magic.cast(int, thread(elem-type), addr) in
    let _: elem-type = this.thread.attach(elem-type, pr) in
    0
  },
  function (addr: int) {
    let u = Word.size in
    let u2 = mul-int(u, 2) in
    let u3 = mul-int(u, 3) in
    _await-and-write-result(_Pointer(addr));
    let thread-id = Mem.load-int(_Pointer(addr)) in
    let elem-type = Magic.cast(int, type, Mem.load-int(_Pointer(add-int(addr, u)))) in
    let elem-value: &elem-type = Magic.cast(int, &elem-type, Mem.load-int(_Pointer(add-int(addr, u2)))) in
    let new-addr = Ext.malloc(_thread-size()) in
    Mem.store-int(thread-id, new-addr);
    Mem.store-int(Magic.cast(type, int, elem-type), shift(new-addr, u));
    let cloned-value: elem-type = _embody(elem-type, elem-value) in
    Mem.store-int(Magic.cast(elem-type, int, cloned-value), shift(new-addr, u2));
    Mem.store-int1(1, shift(new-addr, u3));
    let _Pointer(p) = new-addr in
    p
  },
}

// `thread` must be defined by `define` (and not by `data`) so that
// `thread(a)` is consider to be possibly noetic
define thread(_: type): type {
  _thread-inner
}

define attach(a: type, e: thread(a)): a {
  let addr = Magic.cast(thread(a), pointer, e) in
  _await-and-write-result(addr);
  let u = Word.size in
  let value-ptr = shift(addr, mul-int(u, 2)) in
  let value = Mem.load-int(value-ptr) in
  Ext.free(addr);
  Magic.cast(int, a, value)
}

define _await-and-write-result(addr: pointer): unit {
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let u3 = mul-int(u, 3) in
  let finished-flag-ptr = shift(addr, u3) in
  let finished-flag = Mem.load-int1(finished-flag-ptr) in
  if eq-int1(finished-flag, 0) {
    let thread-id = Mem.load-int(addr) in
    let value-ptr = shift(addr, u2) in
    Ext.thread-join(thread-id, value-ptr);
    Mem.store-int1(1, finished-flag-ptr)
  } else {
    Unit
  }
}

// (thread-id, result-type, result-value, finished-flag): thread(result-type)
define detach(a: type, f: () -> a): thread(a) {
  let thread-func =
    function () {
      Ext.thread-exit(Magic.cast(a, pointer, f()))
    }
  in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let u3 = mul-int(u, 3) in
  let closure = Magic.cast(() -> unit, pointer, thread-func) in
  let closure-env = _Pointer(Mem.load-int(shift(closure, u))) in
  let closure-label = _Pointer(Mem.load-int(shift(closure, u2))) in
  Ext.free(closure);
  let thread-id-pointer = Ext.malloc(u) in
  let thread-create =
    define naive-loop(): unit {
      let result = Ext.thread-create(thread-id-pointer, closure-label, closure-env) in
      if eq-int(result, 0) {
        Unit
      } else {
        naive-loop()
      }
    }
  in
  let _ = thread-create() in
  let thread-id = Mem.load-int(thread-id-pointer) in
  Ext.free(thread-id-pointer);
  let ptr = Ext.malloc(_thread-size()) in
  Mem.store-int(thread-id, ptr);
  Mem.store-int(Magic.cast(type, int, a), shift(ptr, u));
  Mem.store-int(0, shift(ptr, u2));
  Mem.store-int1(0, shift(ptr, u3));
  Magic.cast(pointer, thread(a), ptr)
}
