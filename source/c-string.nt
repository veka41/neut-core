import {
  Magic,
  Mem,
  this.external {free, malloc},
  this.text {_get-content-pointer, text, text-byte-length},
  this.unit,
  this.word,
}

foreign {
  strlen(pointer): int,
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
}

nominal {
  c-string: type,
}

define length-c-string(s: &c-string): int {
  magic external strlen(s)
}

// null-terminated string
resource c-string {
  function (ptr: int) {
    free(ptr);
    0
  },
  function (ptr: int) {
    let s = Magic.cast(int, &c-string, ptr) in
    let len = length-c-string(s) in
    let new-ptr = malloc(add-int(len, 1)) in
    let zero: int = 0 in
    let _: int = magic external llvm.memcpy.p0.p0.i64(new-ptr, s, len, zero) in
    new-ptr
  },
}

define to-c-string(t: &text): c-string {
  let len = text-byte-length(t) in
  let new-ptr = malloc(add-int(len, 1)) in
  let src-ptr = _get-content-pointer(t) in
  let zero: int = 0 in
  let _: int = magic external llvm.memcpy.p0.p0.i64(new-ptr, src-ptr, add-int(len, 1), zero) in
  Magic.cast(int, c-string, new-ptr)
}

define from-c-string(s: &c-string): text {
  let u = this.word.size in
  let u2 = mul-int(u, 2) in
  let len = length-c-string(s) in
  let new-ptr = malloc(add-int(add-int(len, u2), 1)) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(len, add-int(new-ptr, u));
  let zero: int = 0 in
  let _: int = magic external llvm.memcpy.p0.p0.i64(add-int(new-ptr, u2), s, add-int(len, 1), zero) in
  Magic.cast(int, text, new-ptr)
}
