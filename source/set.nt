import {
  Lo {Loset, loset},
  this.bool {False, True, bool},
  this.dict {dict, empty, singleton},
  this.except {Fail, Pass},
  this.unit {Unit, unit},
}

inline set(a): tau {
  dict(a, unit)
}

data trope(k) {
| Trope(
    empty: set(k),
    singleton: (k) -> set(k),
    insert: (k, set(k)) -> set(k),
    lookup: (&k, &set(k)) -> bool,
    delete: (k, set(k)) -> set(k),
  )
}

inline from-loset<k>(_loset: loset(&k)): trope(k) {
  use this.dict.from-loset(_loset) {insert, lookup, delete} in
  Trope of {
    empty = empty(),
    singleton = {
      function (k) {
        singleton(k, Unit)
      }
    },
    insert = {
      function (k, s) {
        insert(k, Unit, s)
      }
    },
    lookup = {
      function (k, s) {
        match lookup(k, s) {
        | Pass(_) =>
          True
        | Fail(_) =>
          False
        }
      }
    },
    delete = exact delete,
  }
}
