import {
- Dict {dict, insert}
- TIO
- this.control {loop}
- this.except {Fail, Pass}
- this.int {as-loset}
- this.loset {loset}
- this.random {random}
- this.unit {Unit, unit}
}

constant L: loset(int) {
  as-loset
}

define L-insert(k: int, v: int, acc: dict(int, int)): dict(int, int) {
  insert(L)(k, v, acc)
}

constant int-dict-trope: Dict.trope(int) {
  Dict.fromLoset(L)
}

define make-big-dict(): dict(int, int) {
  use int-dict-trope {insert} in
  loop(700000, Dict.empty(), (acc, _) => {
    let key = random(1000000) in
    let val = random(1000000) in
    insert(key, val, acc)
  })
}

define random-lookup-sum(d: &dict(int, int)): unit {
  use int-dict-trope {lookup} in
  let rsum =
    loop(700000, 0, (acc, _) => {
      let key = random(1000000) in
      let val on key =
        match lookup(key, d) {
        - Fail(_) =>
          0
        - Pass(v) =>
          *v
        }
      in
      let _ = key in
      add-int(acc, val)
    })
  in
  TIO.print-int(rsum)
}

define main(): unit {
  let big-dict = make-big-dict() in
  let _ on big-dict = random-lookup-sum(big-dict) in
  let _ = big-dict in
  Unit
  // idealize big-dict {
  //   random-lookup-sum(big-dict)
  // }
}
