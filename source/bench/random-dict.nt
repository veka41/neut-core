import {
  Dict {dict, insert},
  TIO,
  this.control {grow},
  this.either {Left, Right},
  this.int.loset {as-loset-N},
  this.random {random},
  this.unit {Unit, unit},
}

constant intdict: Dict.trope(int) {
  Dict.from-loset(as-loset-N)
}

define make-big-dict(): dict(int, int) {
  grow(Dict.empty(), 700000, function (acc, _) {
    let key = random(1000000) in
    let val = random(1000000) in
    intdict::insert(key, val, acc)
  })
}

define random-lookup-sum(d: &dict(int, int)): unit {
  let rsum =
    grow(0, 700000, function (acc, _) {
      let key = random(1000000) in
      let val on key =
        match intdict::lookup(key, d) {
        | Left(_) =>
          0
        | Right(v) =>
          *v
        }
      in
      let _ = key in
      add-int(acc, val)
    })
  in
  TIO.print-int(rsum)
}

define main(): unit {
  let big-dict = make-big-dict() in
  let _ on big-dict = random-lookup-sum(big-dict) in
  let _ = big-dict in
  Unit
}
