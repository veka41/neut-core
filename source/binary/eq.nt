import {
  this.bool {False, True, bool},
  this.eq {Eq, eq},
  this.binary {_get-content-pointer, binary, binary-length},
  this.memory {load-int8},
}

constant _cmp-ptr-t: type {
  (ptr1: int, ptr2: int, index: int, to: int) -> bool
}

constant _cmp-array-t: type {
  (t1: &binary, t2: &binary) -> bool
}

inline _cmp-binary(cmp: (int8, int8) -> bool): _cmp-ptr-t {
  define self(ptr1: int, ptr2: int, index: int, to: int): bool {
    if eq-int(index, to) {
      True
    } else {
      let v1 = load-int8(add-int(ptr1, index)) in
      let v2 = load-int8(add-int(ptr2, index)) in
      if cmp(v1, v2) {
        self(ptr1, ptr2, add-int(index, 1), to)
      } else {
        False
      }
    }
  }
}

define _eq-binary(ptr1: int, ptr2: int, index: int, to: int): bool {
  _cmp-binary(eq-int8)(ptr1, ptr2, index, to)
}

inline cmp-binary(cmp: _cmp-ptr-t): _cmp-array-t {
  function (t1: &binary, t2: &binary): bool {
    let len1 = binary-length(t1) in
    let len2 = binary-length(t2) in
    if ne-int(len1, len2) {
      False
    } else {
      let ptr1 = _get-content-pointer(t1) in
      let ptr2 = _get-content-pointer(t2) in
      cmp(ptr1, ptr2, 0, len1)
    }
  }
}

define eq-binary(t1: &binary, t2: &binary): bool {
  cmp-binary(_eq-binary)(t1, t2)
}

constant as-eq: eq(&binary) {
  Eq of {equal = eq-binary}
}

define eq-prefix(needle: &binary, haystack: &binary): bool {
  let len1 = binary-length(needle) in
  let len2 = binary-length(haystack) in
  if lt-int(len2, len1) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle) in
    let ptr2 = _get-content-pointer(haystack) in
    _eq-binary(ptr1, ptr2, 0, len1)
  }
}

define eq-suffix(needle: &binary, haystack: &binary): bool {
  let len1 = binary-length(needle) in
  let len2 = binary-length(haystack) in
  if lt-int(len2, len1) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle) in
    let ptr2 = _get-content-pointer(haystack) in
    let ptr2' = add-int(ptr2, sub-int(len2, len1)) in
    _eq-binary(ptr1, ptr2', 0, len1)
  }
}

define _eq-infix(index: int, len1: int, len2: int, needle: &binary, haystack: &binary): bool {
  if lt-int(len2, add-int(index, len1)) {
    False
  } else {
    let ptr1 = _get-content-pointer(needle) in
    let ptr2 = _get-content-pointer(haystack) in
    let ptr2' = add-int(ptr2, index) in
    if _eq-binary(ptr1, ptr2', 0, len1) {
      True
    } else {
      _eq-infix(add-int(index, 1), len1, len2, needle, haystack)
    }
  }
}

define eq-infix(needle: &binary, haystack: &binary): bool {
  let len1 = binary-length(needle) in
  let len2 = binary-length(haystack) in
  _eq-infix(0, len1, len2, needle, haystack)
}
