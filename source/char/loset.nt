import {
  this.char {Char1, Char2, Char3, Char4, char},
  this.int.loset {as-loset-int8, as-loset-int8-N},
  this.loset {Loset, loset},
  this.order {EQ, GT, LT},
}

constant as-loset: loset(char) {
  Loset of {
    cmp = {
      function (c1, c2) {
        match c1, c2 {
        | Char1(x1), Char1(y1) =>
          as-loset-int8::cmp(x1, y1)
        | Char1(_), _ =>
          LT
        | Char2(_, _), Char1(_) =>
          GT
        | Char2(x1, x2), Char2(y1, y2) =>
          match as-loset-int8::cmp(x1, y1) {
          | EQ =>
            as-loset-int8::cmp(x2, y2)
          | c =>
            c
          }
        | Char2(_, _), _ =>
          LT
        | Char3(_, _, _), Char1(_) =>
          GT
        | Char3(_, _, _), Char2(_, _) =>
          GT
        | Char3(x1, x2, x3), Char3(y1, y2, y3) =>
          match as-loset-int8::cmp(x1, y1) {
          | EQ =>
            match as-loset-int8::cmp(x2, y2) {
            | EQ =>
              as-loset-int8::cmp(x3, y3)
            | c =>
              c
            }
          | c =>
            c
          }
        | Char3(_, _, _), _ =>
          LT
        | Char4(_, _, _, _), Char1(_) =>
          GT
        | Char4(_, _, _, _), Char2(_, _) =>
          GT
        | Char4(_, _, _, _), Char3(_, _, _) =>
          GT
        | Char4(x1, x2, x3, x4), Char4(y1, y2, y3, y4) =>
          match as-loset-int8::cmp(x1, y1) {
          | EQ =>
            match as-loset-int8::cmp(x2, y2) {
            | EQ =>
              match as-loset-int8::cmp(x3, y3) {
              | EQ =>
                as-loset-int8::cmp(x4, y4)
              | c =>
                c
              }
            | c =>
              c
            }
          | c =>
            c
          }
        }
      }
    },
  }
}

constant as-loset-N: loset(&char) {
  Loset of {
    cmp = {
      function (c1, c2) {
        case c1, c2 {
        | Char1(x1), Char1(y1) =>
          as-loset-int8-N::cmp(x1, y1)
        | Char1(_), _ =>
          LT
        | Char2(_, _), Char1(_) =>
          GT
        | Char2(x1, x2), Char2(y1, y2) =>
          match as-loset-int8-N::cmp(x1, y1) {
          | EQ =>
            as-loset-int8-N::cmp(x2, y2)
          | c =>
            c
          }
        | Char2(_, _), _ =>
          LT
        | Char3(_, _, _), Char1(_) =>
          GT
        | Char3(_, _, _), Char2(_, _) =>
          GT
        | Char3(x1, x2, x3), Char3(y1, y2, y3) =>
          match as-loset-int8-N::cmp(x1, y1) {
          | EQ =>
            match as-loset-int8-N::cmp(x2, y2) {
            | EQ =>
              as-loset-int8-N::cmp(x3, y3)
            | c =>
              c
            }
          | c =>
            c
          }
        | Char3(_, _, _), _ =>
          LT
        | Char4(_, _, _, _), Char1(_) =>
          GT
        | Char4(_, _, _, _), Char2(_, _) =>
          GT
        | Char4(_, _, _, _), Char3(_, _, _) =>
          GT
        | Char4(x1, x2, x3, x4), Char4(y1, y2, y3, y4) =>
          match as-loset-int8-N::cmp(x1, y1) {
          | EQ =>
            match as-loset-int8-N::cmp(x2, y2) {
            | EQ =>
              match as-loset-int8-N::cmp(x3, y3) {
              | EQ =>
                as-loset-int8-N::cmp(x4, y4)
              | c =>
                c
              }
            | c =>
              c
            }
          | c =>
            c
          }
        }
      }
    },
  }
}
