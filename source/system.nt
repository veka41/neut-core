import {
  Magic,
  Word,
  this.bool {bool},
  this.c-string {c-string, from-c-string},
  this.external {exit},
  this.list {Cons, list},
  this.memory {load-int},
  this.pointer {_Pointer, shift},
  this.text {text},
  this.text.io {fflush-all, print},
  this.unit {Unit, unit},
}

inline _admit(a: type, t: &text): a {
  print(t);
  fflush-all();
  exit(1)
}

inline _assert(message: &text, check: () -> bool): unit {
  introspect build-mode {
  | release =>
    let _ = check in
    let _ = message in
    Unit
  | default =>
    if check() {
      Unit
    } else {
      print(message);
      fflush-all();
      exit(1)
    }
  }
}

define panic<a>(t: &text): a {
  print(t);
  fflush-all();
  exit(1)
}

define get-argc(): int {
  let argc-ptr = _Pointer(magic global("neut-unsafe-argc", pointer)) in
  load-int(argc-ptr)
}

define get-argv(): list(text) {
  let argc = get-argc() in
  let argv-ptr = _Pointer(magic global("neut-unsafe-argv", pointer)) in
  let argv = _Pointer(load-int(argv-ptr)) in
  let u = Word.size in
  let f =
    define get-argv-helper(i: int): list(text) {
      if eq-int(i, argc) {
        []
      } else {
        let rest = get-argv-helper(add-int(i, 1)) in
        let str-ptr-ptr = shift(argv, mul-int(i, u)) in
        let str-ptr = load-int(str-ptr-ptr) in
        let t = from-c-string(Magic.cast(int, &c-string, str-ptr)) in
        Cons(t, rest)
      }
    }
  in
  f(0)
}
