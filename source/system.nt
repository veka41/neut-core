import {
  Word,
  this.bool {bool},
  this.external {exit},
  this.list {Cons, for, for-each, list},
  this.memory {load-int},
  this.text {_from-c-string, text},
  this.text.io {print},
  this.thread {flow},
  this.unit {Unit, unit},
}

inline admit(a: tau, t: &text): a {
  print(t);
  exit(1)
}

define _assert(message: &text, check: () -> bool): unit {
  if check() {
    Unit
  } else {
    print(message);
    exit(1)
  }
}

inline assert(message: &text, check: () -> bool): unit {
  introspect build-mode {
  | release =>
    let _ = check in
    let _ = message in
    Unit
  | default =>
    _assert(message, check)
  }
}

define panic<a>(t: &text): a {
  print(t);
  exit(1)
}

inline parallel-test(tests: list(() -> () -> unit)): unit {
  let flow-list =
    for-each(tests, function (testFunc: () -> () -> unit) {
      detach {testFunc()}
    })
  in
  for(flow-list, function (f: flow(() -> unit)) {
    let result = attach {f} in
    result()
  })
}

define get-argc(): int {
  let argc-ptr: int = magic global("neut-unsafe-argc", pointer) in
  let argc: int = load-int(argc-ptr) in
  argc
}

define get-argv(): list(text) {
  let argc = get-argc() in
  let argv-ptr: int = magic global("neut-unsafe-argv", pointer) in
  let argv: int = load-int(argv-ptr) in
  let u = Word.size in
  let f =
    define get-argv-helper(i: int): list(text) {
      if eq-int(i, argc) {
        []
      } else {
        let rest = get-argv-helper(add-int(i, 1)) in
        let str-ptr-ptr = add-int(argv, mul-int(i, u)) in
        let str-ptr = load-int(str-ptr-ptr) in
        let t = _from-c-string(str-ptr) in
        Cons(t, rest)
      }
    }
  in
  f(0)
}
