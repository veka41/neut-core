import {
  this.bool {and},
  this.memory {load-int8, store-int8},
  this.unit,
}

constant rune: tau {
  // a unicode codepoint encoded in utf-8
  int32
}

define size(c: rune): int {
  if and(le-int32(0x00, c), le-int32(c, 0x7F)) {
    1
  } else-if and(le-int32(0xC280, c), le-int32(c, 0xDFBF)) {
    2
  } else-if and(le-int32(0xE08080, c), le-int32(c, 0xEFBFBF)) {
    3
  } else-if and(le-int32(0xF0808080, c), le-int32(c, 0xF4BFBFBF)) {
    4
  } else {
    3
  }
}

define size-by-head-byte(head-byte: int8): int {
  if eq-int8(and-int8(head-byte, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    1
  } else-if eq-int8(and-int8(head-byte, 0xE0), 0xC0) {
    // 0xC0 = 1100 0000
    // 0xE0 = 1110 0000
    2
  } else-if eq-int8(and-int8(head-byte, 0xF0), 0xE0) {
    // 0xE0 = 1110 0000
    // 0xF0 = 1111 0000
    3
  } else-if eq-int8(and-int8(head-byte, 0xF8), 0xF0) {
    // 0xF0 = 1111 0000
    // 0xF8 = 1111 1000
    4
  } else {
    // unicode invalid char (or panic?)
    3
  }
}

define store-rune(value: rune, address: int): int {
  let s = size(value) in
  match s {
  | 1 =>
    let piece-0 = trunc-int32-int8(value) in
    store-int8(piece-0, address);
    1
  | 2 =>
    let value = trunc-int32-int16(value) in
    let piece-0 = trunc-int16-int8(lshr-int16(and-int16(0b_1111_1111_0000_0000, value), 8)) in
    let piece-1 = trunc-int16-int8(lshr-int16(and-int16(0b_0000_0000_1111_1111, value), 0)) in
    store-int8(piece-0, address);
    store-int8(piece-1, add-int(address, 1));
    2
  | 3 =>
    let value = trunc-int32-int24(value) in
    let piece-0 = trunc-int24-int8(lshr-int24(and-int24(0b_1111_1111_0000_0000_0000_0000, value), 16)) in
    let piece-1 = trunc-int24-int8(lshr-int24(and-int24(0b_0000_0000_1111_1111_0000_0000, value), 8)) in
    let piece-2 = trunc-int24-int8(lshr-int24(and-int24(0b_0000_0000_0000_0000_1111_1111, value), 0)) in
    store-int8(piece-0, address);
    store-int8(piece-1, add-int(address, 1));
    store-int8(piece-2, add-int(address, 2));
    3
  | 4 =>
    let piece-0 = trunc-int32-int8(lshr-int32(and-int32(0b_1111_1111_0000_0000_0000_0000_0000_0000, value), 24)) in
    let piece-1 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_1111_1111_0000_0000_0000_0000, value), 16)) in
    let piece-2 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_0000_0000_1111_1111_0000_0000, value), 8)) in
    let piece-3 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_0000_0000_0000_0000_1111_1111, value), 0)) in
    store-int8(piece-0, address);
    store-int8(piece-1, add-int(address, 1));
    store-int8(piece-2, add-int(address, 2));
    store-int8(piece-3, add-int(address, 3));
    4
  | _ =>
    // unreachable
    0
  }
}

inline load-rune(address: int): rune {
  let x0 = load-int8(address) in
  if eq-int8(and-int8(x0, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    magic cast(int8, rune, x0)
  } else-if eq-int8(and-int8(x0, 0xE0), 0xC0) {
    // 0xC0 = 1100 0000
    // 0xE0 = 1110 0000
    let x1 = load-int8(add-int(address, 1)) in
    let x0' = shl-int32(magic cast(int8, int32, x0), 8) in
    let x1' = shl-int32(magic cast(int8, int32, x1), 0) in
    or-int32(x0', x1')
  } else-if eq-int8(and-int8(x0, 0xF0), 0xE0) {
    // 0xE0 = 1110 0000
    // 0xF0 = 1111 0000
    let x1 = load-int8(add-int(address, 1)) in
    let x2 = load-int8(add-int(address, 2)) in
    let x0' = shl-int32(magic cast(int8, int32, x0), 16) in
    let x1' = shl-int32(magic cast(int8, int32, x1), 8) in
    let x2' = shl-int32(magic cast(int8, int32, x2), 0) in
    or-int32(or-int32(x0', x1'), x2')
  } else-if eq-int8(and-int8(x0, 0xF8), 0xF0) {
    // 0xF0 = 1111 0000
    // 0xF8 = 1111 1000
    let x1 = load-int8(add-int(address, 1)) in
    let x2 = load-int8(add-int(address, 2)) in
    let x3 = load-int8(add-int(address, 3)) in
    let x0' = shl-int32(magic cast(int8, int32, x0), 24) in
    let x1' = shl-int32(magic cast(int8, int32, x1), 16) in
    let x2' = shl-int32(magic cast(int8, int32, x2), 8) in
    let x3' = shl-int32(magic cast(int8, int32, x3), 0) in
    or-int32(or-int32(or-int32(x0', x1'), x2'), x3')
  } else {
    // unicode invalid char (or panic?)
    0xEFBFBE
  }
}
