import {
  this.bool {and},
  this.either {Left, Right},
  this.memory {load-int8, store-int8},
  this.unit {Unit},
}

data rune {
| _Rune(int32)
}

define size(c: rune): int {
  let _Rune(c) = c in
  if and(ule-int32(0x00, c), ule-int32(c, 0x7F)) {
    1
  } else-if and(ule-int32(0xC280, c), ule-int32(c, 0xDFBF)) {
    2
  } else-if and(ule-int32(0xE08080, c), ule-int32(c, 0xEFBFBF)) {
    3
  } else-if and(ule-int32(0xF0808080, c), ule-int32(c, 0xF4BFBFBF)) {
    4
  } else {
    3
  }
}

define size-by-head-byte(head-byte: int8): int {
  if eq-int8(and-int8(head-byte, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    1
  } else-if eq-int8(and-int8(head-byte, 0xE0), 0xC0) {
    // 0xC0 = 1100 0000
    // 0xE0 = 1110 0000
    2
  } else-if eq-int8(and-int8(head-byte, 0xF0), 0xE0) {
    // 0xE0 = 1110 0000
    // 0xF0 = 1111 0000
    3
  } else-if eq-int8(and-int8(head-byte, 0xF8), 0xF0) {
    // 0xF0 = 1111 0000
    // 0xF8 = 1111 1000
    4
  } else {
    // unicode invalid char (or panic?)
    3
  }
}

define store-rune(value: rune, address: int): int {
  let s = size(value) in
  let _Rune(value) = value in
  match s {
  | 1 =>
    let piece-0 = trunc-int32-int8(value) in
    store-int8(piece-0, add-int(address, 0));
    1
  | 2 =>
    let value = trunc-int32-int16(value) in
    let piece-0 = trunc-int16-int8(lshr-int16(and-int16(0b_1111_1111_0000_0000, value), 8)) in
    let piece-1 = trunc-int16-int8(lshr-int16(and-int16(0b_0000_0000_1111_1111, value), 0)) in
    store-int8(piece-0, add-int(address, 0));
    store-int8(piece-1, add-int(address, 1));
    2
  | 3 =>
    let value = trunc-int32-int24(value) in
    let piece-0 = trunc-int24-int8(lshr-int24(and-int24(0b_1111_1111_0000_0000_0000_0000, value), 16)) in
    let piece-1 = trunc-int24-int8(lshr-int24(and-int24(0b_0000_0000_1111_1111_0000_0000, value), 8)) in
    let piece-2 = trunc-int24-int8(lshr-int24(and-int24(0b_0000_0000_0000_0000_1111_1111, value), 0)) in
    store-int8(piece-0, add-int(address, 0));
    store-int8(piece-1, add-int(address, 1));
    store-int8(piece-2, add-int(address, 2));
    3
  | 4 =>
    let piece-0 = trunc-int32-int8(lshr-int32(and-int32(0b_1111_1111_0000_0000_0000_0000_0000_0000, value), 24)) in
    let piece-1 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_1111_1111_0000_0000_0000_0000, value), 16)) in
    let piece-2 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_0000_0000_1111_1111_0000_0000, value), 8)) in
    let piece-3 = trunc-int32-int8(lshr-int32(and-int32(0b_0000_0000_0000_0000_0000_0000_1111_1111, value), 0)) in
    store-int8(piece-0, add-int(address, 0));
    store-int8(piece-1, add-int(address, 1));
    store-int8(piece-2, add-int(address, 2));
    store-int8(piece-3, add-int(address, 3));
    4
  | _ =>
    // unreachable
    0
  }
}

inline load-rune(address: int): rune {
  let x0 = load-int8(address) in
  if eq-int8(and-int8(x0, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    magic cast(int8, rune, x0)
  } else-if eq-int8(and-int8(x0, 0xE0), 0xC0) {
    // 0xC0 = 1100 0000
    // 0xE0 = 1110 0000
    let x1 = load-int8(add-int(address, 1)) in
    let x0' = shl-int32(magic cast(int8, int32, x0), 8) in
    let x1' = shl-int32(magic cast(int8, int32, x1), 0) in
    _Rune(or-int32(x0', x1'))
  } else-if eq-int8(and-int8(x0, 0xF0), 0xE0) {
    // 0xE0 = 1110 0000
    // 0xF0 = 1111 0000
    let x1 = load-int8(add-int(address, 1)) in
    let x2 = load-int8(add-int(address, 2)) in
    let x0' = shl-int32(magic cast(int8, int32, x0), 16) in
    let x1' = shl-int32(magic cast(int8, int32, x1), 8) in
    let x2' = shl-int32(magic cast(int8, int32, x2), 0) in
    _Rune(or-int32(or-int32(x0', x1'), x2'))
  } else-if eq-int8(and-int8(x0, 0xF8), 0xF0) {
    // 0xF0 = 1111 0000
    // 0xF8 = 1111 1000
    let x1 = load-int8(add-int(address, 1)) in
    let x2 = load-int8(add-int(address, 2)) in
    let x3 = load-int8(add-int(address, 3)) in
    let x0' = shl-int32(magic cast(int8, int32, x0), 24) in
    let x1' = shl-int32(magic cast(int8, int32, x1), 16) in
    let x2' = shl-int32(magic cast(int8, int32, x2), 8) in
    let x3' = shl-int32(magic cast(int8, int32, x3), 0) in
    _Rune(or-int32(or-int32(or-int32(x0', x1'), x2'), x3'))
  } else {
    // unicode invalid char (or panic?)
    _Rune(0xEFBFBE)
  }
}

define from-int(value: int): ?rune {
  if le-int(0, value) {
    if le-int(value, 0x80) {
      Right(magic cast(int, rune, value))
    } else-if le-int(value, 0x07ff) {
      let mask-X = 0b_1100_0000_1000_0000 in
      let mask-0 = 0b_0000_0111_1100_0000 in
      let mask-1 = 0b_0000_0000_0011_1111 in
      let value = trunc-int-int16(value) in
      let value-0 = and-int16(mask-0, value) in
      let value-1 = and-int16(mask-1, value) in
      let value-0' = shl-int16(value-0, 2) in
      Right(magic cast(int16, rune, or-int16(or-int16(mask-X, value-0'), value-1)))
    } else-if le-int(value, 0xffff) {
      let mask-X = 0b_1110_0000_1000_0000_1000_0000 in
      let mask-0 = 0b_0000_0000_1111_0000_0000_0000 in
      let mask-1 = 0b_0000_0000_0000_1111_1100_0000 in
      let mask-2 = 0b_0000_0000_0000_0000_0011_1111 in
      let value = trunc-int-int24(value) in
      let value-0 = and-int24(mask-0, value) in
      let value-1 = and-int24(mask-1, value) in
      let value-2 = and-int24(mask-2, value) in
      let value-0' = shl-int24(value-0, 4) in
      let value-1' = shl-int24(value-1, 2) in
      Right(magic cast(int24, rune, or-int24(or-int24(or-int24(mask-X, value-0'), value-1'), value-2)))
    } else-if le-int(value, 0x10ffff) {
      let mask-X: int32 = 0b_1111_0000_1000_0000_1000_0000_1000_0000 in
      let mask-0: int32 = 0b_0000_0000_0001_1100_0000_0000_0000_0000 in
      let mask-1: int32 = 0b_0000_0000_0000_0011_1111_0000_0000_0000 in
      let mask-2: int32 = 0b_0000_0000_0000_0000_0000_1111_1100_0000 in
      let mask-3: int32 = 0b_0000_0000_0000_0000_0000_0000_0011_1111 in
      let value = trunc-int-int32(value) in
      let value-0 = and-int32(mask-0, value) in
      let value-1 = and-int32(mask-1, value) in
      let value-2 = and-int32(mask-2, value) in
      let value-3 = and-int32(mask-3, value) in
      let value-0' = shl-int32(value-0, 6) in
      let value-1' = shl-int32(value-1, 4) in
      let value-2' = shl-int32(value-2, 2) in
      Right(
        magic cast(
          int32,
          rune,
          or-int32(
            or-int32(or-int32(or-int32(mask-X, value-0'), value-1'), value-2'),
            value-3,
          ),
        ),
      )
    } else {
      Left(Unit)
    }
  } else {
    Left(Unit)
  }
}

define to-int(r: rune): int {
  let _Rune(value) = r in
  zext-int32-int(value)
}
