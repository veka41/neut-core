import {
- Lo {Loset, loset}
- this.bool {False, True, and, bool, or}
- this.except {Fail, Pass, none}
- this.functor {Functor, functor}
- this.monoid {Monoid, monoid}
- this.order {GT, LT}
- this.pair {Pair, pair}
- this.semigroup {from-monoid, semigroup}
- this.unit {Unit, unit}
}

data list(a: tau) {
- Nil
- Cons(a, list(a))
}

// folds are optimized into loops
inline fold-left<elem-type, result-type> of {
- acc: result-type
- xs: list(elem-type)
- consumer: arrow (result-type, elem-type) => result-type
}: result-type {
  let helper =
    define loop(acc, xs): result-type {
      match xs {
      - Nil =>
        acc
      - Cons(y, ys) =>
        loop(consumer(acc, y), ys)
      }
    }
  in
  helper(acc, xs)
}

inline fold-left-noetic<elem-type, result-type> of {
- acc: result-type
- xs: &list(elem-type)
- consumer: arrow (result-type, &elem-type) => result-type
}: result-type {
  let helper =
    define loop(acc, xs): result-type {
      case xs {
      - Nil =>
        acc
      - Cons(y, ys) =>
        loop(consumer(acc, y), ys)
      }
    }
  in
  helper(acc, xs)
}

inline fold-right<elem-type, result-type> of {
- xs: list(elem-type)
- acc: result-type
- consumer: arrow (elem-type, result-type) => result-type
}: result-type {
  let helper =
    define loop(xs, acc): result-type {
      match xs {
      - Nil =>
        acc
      - Cons(y, ys) =>
        consumer(y, loop(ys, acc))
      }
    }
  in
  helper(xs, acc)
}

inline fold-right-noetic<elem-type, result-type> of {
- xs: &list(elem-type)
- acc: result-type
- consumer: arrow (&elem-type, result-type) => result-type
}: result-type {
  let helper =
    define loop(xs, acc): result-type {
      case xs {
      - Nil =>
        acc
      - Cons(y, ys) =>
        consumer(y, loop(ys, acc))
      }
    }
  in
  helper(xs, acc)
}

inline map<a, b>(f: arrow (a) => b, xs: list(a)): list(b) {
  fold-right(xs, [], (x, acc) => {
    Cons(f(x), acc)
  })
}

inline map-noetic<a, b>(f: arrow (&a) => b, xs: &list(a)): list(b) {
  fold-right-noetic(xs, [], (x, acc) => {
    Cons(f(x), acc)
  })
}

inline for-each<a, b>(xs: list(a), f: arrow (a) => b): list(b) {
  map(f, xs)
}

inline for<a>(xs: list(a), f: arrow (a) => unit): unit {
  let _ = map(f, xs) in
  Unit
}

define loop(count: int, f: arrow (int) => unit): unit {
  let helper =
    define self(cursor): unit {
      match ge-int(cursor, count) {
      - True =>
        Unit
      - False =>
        f(cursor);
        self(add-int(cursor, 1))
      }
    }
  in
  helper(0)
}

inline repeat<a>(count: int, f: arrow (int) => a): list(a) {
  let helper =
    define self(cursor): list(a) {
      if ge-int(cursor, count) {
        Nil
      } else {
        Cons(f(cursor), self(add-int(cursor, 1)))
      }
    }
  in
  helper(0)
}

define append<a>(xs: list(a), ys: list(a)): list(a) {
  fold-right(xs, ys, exact Cons)
}

define concat<a>(xss: list(list(a))): list(a) {
  fold-left([], xss, exact append)
}

define reverse<a>(xs: list(a)): list(a) {
  fold-left([], xs, (acc, x) => {
    Cons(x, acc)
  })
}

define length<a>(xs: &list(a)): int {
  fold-left-noetic(0, xs, (acc, _) => {
    add-int(1, acc)
  })
}

define unzip<a, b>(xs: list(pair(a, b))): pair(list(a), list(b)) {
  fold-right(xs, Pair([], []), (x, acc) => {
    let Pair(l, r) = x in
    let Pair(rest-l, rest-r) = acc in
    Pair(Cons(l, rest-l), Cons(r, rest-r))
  })
}

define uncons<a>(xs: list(a)): ?pair(a, list(a)) {
  match xs {
  - Nil =>
    none()
  - Cons(y, ys) =>
    Pass(Pair(y, ys))
  }
}

define all(xs: list(bool)): bool {
  fold-left(True, xs, and)
}

define any(xs: list(bool)): bool {
  fold-left(False, xs, or)
}

// right-open interval
define range(from: int, to: int): list(int) {
  if eq-int(from, to) {
    Nil
  } else {
    Cons(from, range(add-int(from, 1), to))
  }
}

define filter-some<a>(xs: list(?a)): list(a) {
  fold-right(xs, [], (x, acc) => {
    match x {
    - Pass(v) =>
      Cons(v, acc)
    - Fail(_) =>
      acc
    }
  })
}

inline sum<a>(as-monoid: monoid(a), xs: list(a)): a {
  let Monoid of {e, op} = as-monoid in
  fold-left(e, xs, (acc, x) => {
    op(acc, x)
  })
}

inline minimum<a>(as-ord: loset(a)): arrow (list(a)) => ?a {
  (xs) => {
    let Loset of {cmp} = as-ord in
    match xs {
    - Nil =>
      none()
    - Cons(y, ys) =>
      Pass(fold-left(y, ys, (acc, y) => {
        let order on acc, y = cmp(acc, y) in
        match order {
        - LT =>
          acc
        - _ =>
          y
        }
      }))
    }
  }
}

inline maximum<a>(as-ord: loset(a)): arrow (list(a)) => ?a {
  (xs) => {
    let Loset of {cmp} = as-ord in
    let helper =
      define self(cand: a, ys: list(a)): a {
        match ys {
        - Nil =>
          cand
        - Cons(z, zs) =>
          let order on cand, z = cmp(cand, z) in
          match order {
          - GT =>
            self(cand, zs)
          - _ =>
            self(z, zs)
          }
        }
      }
    in
    match xs {
    - Nil =>
      none()
    - Cons(y, ys) =>
      Pass(helper(y, ys))
    }
  }
}

inline as-monoid<a>(): monoid(list(a)) {
  Monoid of {
  - e = []
  - op =
    (x, y) => {
      append(x, y)
    }
  }
}

inline as-semigroup<a>(): semigroup(list(a)) {
  from-monoid(as-monoid())
}

constant as-functor: functor(list) {
  Functor of {map}
}
