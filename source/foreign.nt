import {
  this.bool {bool},
}

foreign {
  neut_core_v0_48_errno(): int,
  neut_core_v0_48_wifexited(pointer): int,
  neut_core_v0_48_wifsignaled(pointer): int,
  neut_core_v0_48_wifstopped(pointer): int,
  neut_core_v0_48_wexitstatus(pointer): int,
  neut_core_v0_48_wtermsig(pointer): int,
  neut_core_v0_48_wcoredump(pointer): int,
  neut_core_v0_48_wstopsig(pointer): int,
  neut_core_v0_48_word_size(): int,
  neut_core_v0_48_O_RDONLY(): int,
  neut_core_v0_48_O_WRONLY(): int,
  neut_core_v0_48_O_RDWR(): int,
  neut_core_v0_48_O_CREAT(): int,
  neut_core_v0_48_O_APPEND(): int,
  neut_core_v0_48_SEEK_SET(): int,
  neut_core_v0_48_SEEK_CUR(): int,
  neut_core_v0_48_SEEK_END(): int,
  neut_core_v0_48_thread_mutex_size(): int,
  neut_core_v0_48_thread_cond_size(): int,
  neut_core_v0_48_UINT32_MAX(): int,
}

define get-errno(): int {
  magic external neut_core_v0_48_errno()
}

define _wifexited(ptr: int): bool {
  magic external neut_core_v0_48_wifexited(ptr)
}

define _wifsignaled(ptr: int): bool {
  magic external neut_core_v0_48_wifsignaled(ptr)
}

define _wifstopped(ptr: int): bool {
  magic external neut_core_v0_48_wifstopped(ptr)
}

define _wexitstatus(ptr: int): int {
  magic external neut_core_v0_48_wexitstatus(ptr)
}

define _wtermsig(ptr: int): int {
  magic external neut_core_v0_48_wtermsig(ptr)
}

define _wcoredump(ptr: int): bool {
  magic external neut_core_v0_48_wcoredump(ptr)
}

define _wstopsig(ptr: int): int {
  magic external neut_core_v0_48_wstopsig(ptr)
}

constant _size: int {
  magic external neut_core_v0_48_word_size()
}

constant O_RDONLY: int {
  magic external neut_core_v0_48_O_RDONLY()
}

constant O_WRONLY: int {
  magic external neut_core_v0_48_O_WRONLY()
}

constant O_RDWR: int {
  magic external neut_core_v0_48_O_RDWR()
}

constant O_CREAT: int {
  magic external neut_core_v0_48_O_CREAT()
}

constant O_APPEND: int {
  magic external neut_core_v0_48_O_APPEND()
}

constant SEEK_SET: int {
  magic external neut_core_v0_48_SEEK_SET()
}

constant SEEK_CUR: int {
  magic external neut_core_v0_48_SEEK_CUR()
}

constant SEEK_END: int {
  magic external neut_core_v0_48_SEEK_END()
}

constant THREAD_MUTEX_SIZE: int {
  magic external neut_core_v0_48_thread_mutex_size()
}

constant THREAD_COND_SIZE: int {
  magic external neut_core_v0_48_thread_cond_size()
}

constant UINT32_MAX: int {
  magic external neut_core_v0_48_UINT32_MAX()
}
