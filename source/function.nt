define flip[a, b, c](f: (a, b) -> c): (b, a) -> c {
  lambda (y, x) {
    f(x, y)
  }
}

define compose[a, b, c](f: a -> b, g: b -> c): a -> c {
  lambda (x) {
    g(f(x))
  }
}

define curry[a, b, c](f: (a, b) -> c): a -> b -> c {
  lambda (x) {
    lambda (y) {
      f(x, y)
    }
  }
}

define uncurry[a, b, c](f: a -> b -> c): (a, b) -> c {
  lambda (x, y) {
    f(x)(y)
  }
}

export {
- flip
- compose
- curry
- uncurry
}
