import {
  this.unit {unit},
}

inline store-int(value: int, address: int): unit {
  introspect arch {
  | amd64 =>
    magic store(int64, value, address)
  | arm64 =>
    magic store(int64, value, address)
  }
}

inline store-int32(value: int32, address: int): unit {
  magic store(int32, value, address)
}

inline store-int8(value: int8, address: int): unit {
  magic store(int8, value, address)
}

inline store-int1(value: int1, address: int): unit {
  magic store(int1, value, address)
}

inline load-int32(address: int): int32 {
  magic load(int32, address)
}

inline load-int(address: int): int {
  magic load(int64, address)
}

inline load-int8(address: int): int8 {
  magic load(int8, address)
}

inline load-int16(address: int): int16 {
  magic load(int16, address)
}

inline load-int24(address: int): int24 {
  magic load(int24, address)
}

inline load-int1(address: int): int1 {
  magic load(int1, address)
}

inline store-float(value: float, address: int): unit {
  magic store(float, value, address)
}

inline load-float(address: int): float {
  magic load(float, address)
}
