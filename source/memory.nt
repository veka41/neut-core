import {
  this.c-int {C-Int, c-int},
  this.unit {unit},
}

inline store-pointer(value: pointer, p: pointer): unit {
  magic store(pointer, value, p)
}

inline store-int(value: int, p: pointer): unit {
  magic store(int, value, p)
}

inline store-int32(value: int32, p: pointer): unit {
  magic store(int32, value, p)
}

inline store-int24(value: int24, p: pointer): unit {
  magic store(int24, value, p)
}

inline store-int16(value: int16, p: pointer): unit {
  magic store(int16, value, p)
}

inline store-int8(value: int8, p: pointer): unit {
  magic store(int8, value, p)
}

inline store-int1(value: int1, p: pointer): unit {
  magic store(int1, value, p)
}

inline store-float(value: float, p: pointer): unit {
  magic store(float, value, p)
}

inline load-pointer(p: pointer): pointer {
  magic load(pointer, p)
}

inline load-int(p: pointer): int {
  magic load(int, p)
}

inline load-int32(p: pointer): int32 {
  magic load(int32, p)
}

inline load-int8(p: pointer): int8 {
  magic load(int8, p)
}

inline load-int16(p: pointer): int16 {
  magic load(int16, p)
}

inline load-int24(p: pointer): int24 {
  magic load(int24, p)
}

inline load-int1(p: pointer): int1 {
  magic load(int1, p)
}

inline load-float(p: pointer): float {
  magic load(float, p)
}

inline load-c-int(p: pointer): c-int {
  introspect architecture {
  | arm64 =>
    C-Int(magic load(int32, p))
  | amd64 =>
    C-Int(magic load(int32, p))
  }
}
