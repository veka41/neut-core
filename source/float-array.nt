import {
- Int
- Magic
- Mem
- Word
- this.bool
- this.except {Pass, from-option, none}
- this.external {free, malloc}
- this.list {Cons, Nil, list, minimum}
- this.pair {Pair, pair}
- this.unit {Unit, unit}
}

define unsafe-copy-float-array(source-pointer: int, target-pointer: int, index: int, from: int, to: int): unit {
  if eq-int(from, to) {
    Unit
  } else {
    let u = Word.size in
    let value = Mem.load-float(add-int(source-pointer, mul-int(u, from))) in
    Mem.store-float(value, add-int(target-pointer, mul-int(u, index)));
    unsafe-copy-float-array(source-pointer, target-pointer, add-int(index, 1), add-int(from, 1), to)
  }
}

resource float-array {
- (x: int) => {
    Magic.cast(unit, int, free(x))
  }
- (source-pointer: int) => {
    let u = Word.size in
    let u2 = mul-int(u, 2) in
    let from = Mem.load-int(source-pointer) in
    let to = Mem.load-int(add-int(source-pointer, u)) in
    let length = sub-int(to, from) in
    let target-pointer = malloc(add-int(mul-int(u, length), u2)) in
    Mem.store-int(0, target-pointer);
    Mem.store-int(length, add-int(target-pointer, u));
    unsafe-copy-float-array(add-int(source-pointer, u2), add-int(target-pointer, u2), 0, from, to);
    target-pointer
  }
}

define length(xs: &float-array): int {
  let source-pointer = magic cast(&float-array, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(source-pointer) in
  let to = Mem.load-int(add-int(source-pointer, u)) in
  sub-int(to, from)
}

define new(xs: list(float)): float-array {
  let len on xs = this.list.length(xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let base-pointer = malloc(add-int(mul-int(u, len), u2)) in
  Mem.store-int(0, base-pointer);
  Mem.store-int(len, add-int(base-pointer, u));
  let content-pointer: int = add-int(base-pointer, u2) in
  let store-values =
    define self(values: list(float), index: int): unit {
      match values {
      - Nil =>
        Unit
      - Cons(v, rest) =>
        Mem.store-float(v, add-int(content-pointer, mul-int(u, index)));
        self(rest, add-int(index, 1))
      }
    }
  in
  let _ = store-values(xs, 0) in
  Magic.cast(int, float-array, base-pointer)
}

inline access(xs: &float-array, i: int): float {
  let ptr = Magic.cast(&float-array, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(ptr) in
  let u2 = mul-int(u, 2) in
  Mem.load-float(add-int(add-int(ptr, u2), mul-int(u, add-int(from, i))))
}

inline store(xs: float-array, i: int, x: float): float-array {
  let ptr = Magic.cast(float-array, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(ptr) in
  let u2 = mul-int(u, 2) in
  Mem.store-float(x, add-int(add-int(ptr, u2), mul-int(u, add-int(from, i))));
  Magic.cast(int, float-array, ptr)
}

// O(1)
define tail(xs: float-array): float-array {
  let ptr = Magic.cast(float-array, int, xs) in
  let from = Mem.load-int(ptr) in
  Mem.store-int(add-int(from, 1), ptr);
  Magic.cast(int, float-array, ptr)
}

// O(1)
define uncons(xs: float-array): ?pair(float, float-array) {
  let len on xs = this.float-array.length(xs) in
  if eq-int(len, 0) {
    none()
  } else {
    let head-content on xs = access(xs, 0) in
    Pass(Pair(head-content, tail(xs)))
  }
}

// O(1)
define swap(xs: float-array, i: int, j: int): float-array {
  let v1 on xs = access(xs, i) in
  let v2 on xs = access(xs, j) in
  let xs = store(xs, i, v2) in
  store(xs, j, v1)
}

define for-each(xs: &float-array, f: (float) -> unit): unit {
  let ptr = Magic.cast(&float-array, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(ptr) in
  let to = Mem.load-int(add-int(ptr, u)) in
  let len = sub-int(to, from) in
  let for-each-helper =
    define self(cursor: int): unit {
      if eq-int(cursor, len) {
        Unit
      } else {
        let val = access(xs, cursor) in
        f(val);
        self(add-int(cursor, 1))
      }
    }
  in
  for-each-helper(0)
}

define zip-with(f: (float, float) -> float, xs: &float-array, ys: &float-array): float-array {
  let len1 = this.float-array.length(xs) in
  let len2 = this.float-array.length(ys) in
  let len-or-none = minimum(Int.as-loset)([len1, len2]) in
  let len = from-option(0, len-or-none) in
  let zip-with-helper =
    define self(cursor: int): list(float) {
      if eq-int(cursor, len) {
        []
      } else {
        let val1 = access(xs, cursor) in
        let val2 = access(ys, cursor) in
        Cons(f(val1, val2), self(add-int(cursor, 1)))
      }
    }
  in
  new(zip-with-helper(0))
}
