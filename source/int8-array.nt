import {
- Magic
- Mem
- Word
- this.bool
- this.external {free, malloc}
- this.list {Cons, Nil, length, list}
- this.unit {Unit, unit}
}

define unsafe-copy-int8-array(source-pointer: int, target-pointer: int, index: int, from: int, to: int): unit {
  if eq-int(from, to) {
    Unit
  } else {
    let value = Mem.load-int8(add-int(source-pointer, from)) in
    Mem.store-int8(value, add-int(target-pointer, index));
    unsafe-copy-int8-array(source-pointer, target-pointer, add-int(index, 1), add-int(from, 1), to)
  }
}

resource int8-array {
- function (x: int) {
    Magic.cast(unit, int, free(x))
  }
- function (source-pointer: int) {
    let u = Word.size in
    let u2 = mul-int(u, 2) in
    let from = Mem.load-int(source-pointer) in
    let to = Mem.load-int(add-int(source-pointer, u)) in
    let length = sub-int(to, from) in
    let target-pointer = malloc(add-int(length, u2)) in
    Mem.store-int(0, target-pointer);
    Mem.store-int(length, add-int(target-pointer, u));
    unsafe-copy-int8-array(add-int(source-pointer, u2), add-int(target-pointer, u2), 0, from, to);
    target-pointer
  }
}

define int8-array-length(xs: &int8-array): int {
  let source-pointer = magic cast(&int8-array, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(source-pointer) in
  let to = Mem.load-int(add-int(source-pointer, u)) in
  sub-int(to, from)
}

define int8-array-new(xs: list(int8)): int8-array {
  let len on xs = length(xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let base-pointer = malloc(add-int(len, u2)) in
  Mem.store-int(0, base-pointer);
  Mem.store-int(len, add-int(base-pointer, u));
  let content-pointer: int = add-int(base-pointer, u2) in
  let store-values =
    define self(values: list(int8), index: int): unit {
      match values {
      - Nil =>
        Unit
      - Cons(v, rest) =>
        Mem.store-int8(v, add-int(content-pointer, index));
        self(rest, add-int(index, 1))
      }
    }
  in
  let _ = store-values(xs, 0) in
  Magic.cast(int, int8-array, base-pointer)
}

define int8-array-access(xs: &int8-array, i: int): int8 {
  let ptr = Magic.cast(&int8-array, int, xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  Mem.load-int8(add-int(add-int(ptr, u2), i))
}
