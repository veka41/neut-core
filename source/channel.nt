import {
- this.except [Pass, Fail]
- this.int [sum-int]
- this.pair
- this.unit [unit]
- Q
- Ext
- List
- Magic
- Mem
- Word
}

inline -get-clone(a: tau, x: &a): a {
  *x
}

mutual {
  define channel(_: tau): tau {
    -channel
  }

  define -new(a: tau, q: Q.queue(a)): channel(a) {
    let mutex-size = Ext.thread-mutex-size() in
    let cond-size = Ext.thread-cond-size() in
    let u = Word.size in
    let ptr = Ext.malloc(sum-int([u, mutex-size, cond-size, u])) in
    Mem.store-int(Magic.cast(Q.queue(a), int, q), ptr);
    Ext.thread-mutex-init(add-int(ptr, u));
    Ext.thread-cond-init(add-int(ptr, add-int(u, mutex-size)));
    Mem.store-int(Magic.cast(tau, int, a), add-int(ptr, add-int(u, add-int(mutex-size, cond-size))));
    Magic.cast(int, channel(a), ptr)
  }

  // (queue, mutex, cond, queue-elem-type)
  resource -channel {
  - (ch: int) => {
      let u = Word.size in
      let mutex-size = Ext.thread-mutex-size() in
      let cond-size = Ext.thread-cond-size() in
      let cond-offset = add-int(u, mutex-size) in
      let type-offset = add-int(u, add-int(mutex-size, cond-size)) in
      let a = Magic.cast(int, tau, Mem.load-int(add-int(ch, type-offset))) in
      Ext.thread-cond-destroy(add-int(ch, cond-offset));
      Ext.thread-mutex-destroy(add-int(ch, u));
      let _: Q.queue(a) = magic cast(int, Q.queue(a), Mem.load-int(ch)) in
      Ext.free(ch);
      0
    }
  - (ch: int) => {
      let u = Word.size in
      let mutex-size = Ext.thread-mutex-size() in
      let cond-size = Ext.thread-cond-size() in
      let type-offset = add-int(u, add-int(mutex-size, cond-size)) in
      let a = Magic.cast(int, tau, Mem.load-int(add-int(ch, type-offset))) in
      let q: &Q.queue(a) = Magic.cast(int, &Q.queue(a), Mem.load-int(ch)) in
      let q-clone: Q.queue(a) = -get-clone(Q.queue(a), q) in
      Magic.cast(channel(a), int, -new(a, q-clone))
    }
  }
}

inline new-channel[a](): channel(a) {
  -new(a, Q.empty())
}

define send[a](ch: &channel(a), x: a): unit {
  let ch = Magic.cast(&channel(a), int, ch) in
  let u = Word.size in
  let mutex-ptr = add-int(ch, u) in
  Ext.thread-mutex-lock(mutex-ptr);
  let q-base: int = Mem.load-int(ch) in
  let q: Q.queue(a) = Magic.cast(int, Q.queue(a), q-base) in
  let q = Q.enqueue(x, q) in
  Mem.store-int(Magic.cast(Q.queue(a), int, q), ch);
  let mutex-size = Ext.thread-mutex-size() in
  Ext.thread-cond-signal(add-int(ch, add-int(u, mutex-size)));
  Ext.thread-mutex-unlock(mutex-ptr)
}

define -receive-from-channel(a: tau, ch: int, mutex-ptr: int): a {
  let q: Q.queue(a) = Magic.cast(int, Q.queue(a), Mem.load-int(ch)) in
  match Q.dequeue(q) {
  - Pass(Tuple(v, q)) =>
    Mem.store-int(Magic.cast(Q.queue(a), int, q), ch);
    Ext.thread-mutex-unlock(mutex-ptr);
    v
  - Fail(_) =>
    Mem.store-int(Magic.cast(Q.queue(int), int, Q.empty()), ch);
    let u = Word.size in
    let mutex-size = Ext.thread-mutex-size() in
    let cond-ptr = add-int(ch, add-int(u, mutex-size)) in
    Ext.thread-cond-wait(cond-ptr, mutex-ptr);
    -receive-from-channel(a, ch, mutex-ptr)
  }
}

define receive[a](ch: &channel(a)): a {
  let ch = Magic.cast(&channel(a), int, ch) in
  let u = Word.size in
  let mutex-ptr = add-int(ch, u) in
  Ext.thread-mutex-lock(mutex-ptr);
  -receive-from-channel(a, ch, mutex-ptr)
}
