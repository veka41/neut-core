import {
  Ext,
  FD,
  Magic,
  Mem,
  Seek,
  Word,
  this.bool,
  this.errno {report-system-error, system},
  this.except {Fail, Pass},
  this.int.parse {parse},
  this.list {Cons, Nil, list},
  this.memory,
  this.pair {Pair},
  this.text {break-on, drop, text, text-byte-length, unsafe-get-content-pointer},
  this.unit {Unit, unit},
}

define write(t: &text, f: FD.descriptor): system(int) {
  let ptr = Magic.cast(&text, int, t) in
  let u = Word.size in
  let from = Mem.load-int(ptr) in
  let to = Mem.load-int(add-int(ptr, u)) in
  let content-pointer: int = add-int(add-int(ptr, mul-int(u, 2)), from) in
  let len = sub-int(to, from) in
  let bytes: int = Ext.write(f, content-pointer, len) in
  if lt-int(bytes, 0) {
    report-system-error()
  } else {
    Pass(bytes)
  }
}

foreign {
  printf(pointer): void,
  fflush(pointer): void,
}

define print(t: &text): unit {
  let fmt = unsafe-get-content-pointer("%.*s\0") in
  let len = text-byte-length(t) in
  let val = unsafe-get-content-pointer(t) in
  magic external printf(fmt)(len: int, val: pointer)
}

// for now
define printf(fmt: &text, args: list(text)): unit {
  match args {
  | Nil =>
    print(fmt)
  | Cons(arg, rest) =>
    let Pair(before, after) = break-on("{}", fmt) in
    let _ on before = print(before) in
    let _ = before in
    let no-hole on after = this.text.is-empty(after) in
    if no-hole {
      Unit
    } else {
      let _ on arg = print(arg) in
      let _ = arg in
      let after' = drop(2, after) in
      let _ on after' = printf(after', rest) in
      let _ = after' in
      Unit
    }
  }
}

define print-int(x: int): unit {
  let fmt = unsafe-get-content-pointer("%ld\0") in
  magic external printf(fmt)(x: int)
}

define print-line(t: &text): unit {
  let fmt = unsafe-get-content-pointer("%.*s\n\0") in
  let len = text-byte-length(t) in
  let val = unsafe-get-content-pointer(t) in
  magic external printf(fmt)(len: int, val: pointer)
}

define print-float(x: float): unit {
  let fmt = unsafe-get-content-pointer("%lf\0") in
  magic external printf(fmt)(x: float)
}

define fflush(ptr: int): unit {
  magic external fflush(ptr)
}

define fflush-all(): unit {
  let zero: int = 0 in
  magic external fflush(zero)
}

define _read-inner(from: FD.descriptor, ptr: int, ptr-size: int, len-cand: int, buffer-size: int): system(text) {
  let u = Word.size in
  let content-size = sub-int(ptr-size, mul-int(u, 2)) in
  if lt-int(content-size, add-int(len-cand, buffer-size)) {
    let new-size = mul-int(ptr-size, 2) in
    let new-ptr = Ext.realloc(ptr, new-size) in
    if eq-int(new-ptr, 0) {
      report-system-error()
    } else {
      _read-inner(from, new-ptr, new-size, len-cand, buffer-size)
    }
  } else {
    let content-ptr = add-int(ptr, add-int(mul-int(u, 2), len-cand)) in
    let bytes = Ext.read(from, content-ptr, buffer-size) in
    let next-len-cand = add-int(len-cand, bytes) in
    if lt-int(bytes, 0) {
      Ext.free(ptr);
      report-system-error()
    } else-if lt-int(bytes, buffer-size) {
      Mem.store-int(next-len-cand, add-int(ptr, u));
      Pass(Magic.cast(int, text, ptr))
    } else {
      _read-inner(from, ptr, ptr-size, next-len-cand, buffer-size)
    }
  }
}

define read(from: FD.descriptor): system(text) {
  let default-input-size = 1024 in
  let u = Word.size in
  let ptr-size = add-int(default-input-size, mul-int(u, 2)) in
  let ptr = Ext.malloc(ptr-size) in
  Mem.store-int(0, ptr);
  _read-inner(from, ptr, ptr-size, 0, default-input-size)
}

define get-line(): system(text) {
  read(FD.stdin)
}

define zen(): unit {
  match parse("123123123") {
  | Pass(v) =>
    print-int(v)
  | Fail(_) =>
    print("failed to parse\n")
  }
}
