import {
  this.bool {and, bool},
  this.list {Cons, any, concat, list},
  this.rune {size-by-head-byte},
  this.show {Show, show},
  this.text {
    _drop-N,
    _get-head-byte,
    _slice-N,
    join,
    text,
    text-byte-length,
  },
}

// returns true iff `ch` is a C0 control character, a delete, a backslash, or a double escape
define _is-1-byte-escaped-character(ch: int8): bool {
  any([
    and(ule-int8(0, ch), ule-int8(ch, 0x1f)),
    eq-int8(ch, 0x22),
    eq-int8(ch, 0x5c),
    eq-int8(ch, 0x7f),
  ])
}

// returns true iff `ch` is the lower 8 bits of a C1 control character
define _is-2-byte-escaped-character(ch: int8): bool {
  and(ule-int8(0x80, ch), ule-int8(ch, 0x9f))
}

define _get-escaped-character-1(ch: int8): &text {
  match ch {
  | 0x00 =>
    "\\0"
  | 0x01 =>
    "\\SOH"
  | 0x02 =>
    "\\STX"
  | 0x03 =>
    "\\ETX"
  | 0x04 =>
    "\\EOT"
  | 0x05 =>
    "\\ENQ"
  | 0x06 =>
    "\\ACK"
  | 0x07 =>
    "\\a"
  | 0x08 =>
    "\\b"
  | 0x09 =>
    "\\t"
  | 0x0A =>
    "\\n"
  | 0x0B =>
    "\\v"
  | 0x0C =>
    "\\f"
  | 0x0D =>
    "\\r"
  | 0x0E =>
    "\\SO"
  | 0x0F =>
    "\\SI"
  | 0x10 =>
    "\\DLE"
  | 0x11 =>
    "\\DC1"
  | 0x12 =>
    "\\DC2"
  | 0x13 =>
    "\\DC3"
  | 0x14 =>
    "\\DC4"
  | 0x15 =>
    "\\NAK"
  | 0x16 =>
    "\\SYN"
  | 0x17 =>
    "\\ETB"
  | 0x18 =>
    "\\CAN"
  | 0x19 =>
    "\\EM"
  | 0x1A =>
    "\\SUB"
  | 0x1B =>
    "\\ESC"
  | 0x1C =>
    "\\FS"
  | 0x1D =>
    "\\GS"
  | 0x1E =>
    "\\RS"
  | 0x1F =>
    "\\US"
  | 0x20 =>
    "\\SP"
  | 0x22 =>
    "\\\""
  | 0x5c =>
    "\\\\"
  | 0x7F =>
    "\\DEL"
  | _ =>
    ""
  }
}

define _get-escaped-character-2(ch: int8): &text {
  match ch {
  | 0x7f =>
    "\\x7f"
  | 0x80 =>
    "\\x80"
  | 0x81 =>
    "\\x81"
  | 0x82 =>
    "\\x82"
  | 0x83 =>
    "\\x83"
  | 0x84 =>
    "\\x84"
  | 0x85 =>
    "\\x85"
  | 0x86 =>
    "\\x86"
  | 0x87 =>
    "\\x87"
  | 0x88 =>
    "\\x88"
  | 0x89 =>
    "\\x89"
  | 0x8a =>
    "\\x8a"
  | 0x8b =>
    "\\x8b"
  | 0x8c =>
    "\\x8c"
  | 0x8d =>
    "\\x8d"
  | 0x8e =>
    "\\x8e"
  | 0x8f =>
    "\\x8f"
  | 0x90 =>
    "\\x90"
  | 0x91 =>
    "\\x91"
  | 0x92 =>
    "\\x92"
  | 0x93 =>
    "\\x93"
  | 0x94 =>
    "\\x94"
  | 0x95 =>
    "\\x95"
  | 0x96 =>
    "\\x96"
  | 0x97 =>
    "\\x97"
  | 0x98 =>
    "\\x98"
  | 0x99 =>
    "\\x99"
  | 0x9a =>
    "\\x9a"
  | 0x9b =>
    "\\x9b"
  | 0x9c =>
    "\\x9c"
  | 0x9d =>
    "\\x9d"
  | 0x9e =>
    "\\x9e"
  | 0x9f =>
    "\\x9f"
  | _ =>
    ""
  }
}

define _escape(t: &text, len: int, pivot: int, cursor: int): list(text) {
  let _next =
    function () {
      _escape(t, len, pivot, add-int(cursor, 1))
    }
  in
  let index = add-int(pivot, cursor) in
  if ge-int(index, len) {
    [_drop-N(pivot, t)]
  } else {
    let head-char = _get-head-byte(t, index) in
    let char-len = size-by-head-byte(head-char) in
    if _is-1-byte-escaped-character(head-char) {
      let piece = _slice-N(pivot, cursor, t) in
      let escaped-control-char = _get-escaped-character-1(head-char) in
      let rest = _escape(t, len, add-int(add-int(pivot, cursor), char-len), 0) in
      Cons(piece, Cons(*escaped-control-char, rest))
    } else {
      if eq-int(char-len, 2) {
        if eq-int8(head-char, 0xc2) {
          let head-char-2 = _get-head-byte(t, add-int(index, 1)) in
          if _is-2-byte-escaped-character(head-char-2) {
            let piece = _slice-N(pivot, cursor, t) in
            let escaped-control-char = _get-escaped-character-2(head-char-2) in
            let rest = _escape(t, len, add-int(add-int(pivot, cursor), char-len), 0) in
            Cons(piece, Cons(*escaped-control-char, rest))
          } else {
            _next()
          }
        } else {
          _next()
        }
      } else {
        _next()
      }
    }
  }
}

define show-text(t: text): text {
  let len on t = text-byte-length(t) in
  let result on t = join(concat([[*"\""], _escape(t, len, 0, 0), [*"\""]])) in
  let _ = t in
  result
}

define show-text-N(t: &text): text {
  let len = text-byte-length(t) in
  join(concat([[*"\""], _escape(t, len, 0, 0), [*"\""]]))
}

constant as-show: show(text) {
  Show(show-text)
}

constant as-show-N: show(&text) {
  Show(show-text-N)
}
