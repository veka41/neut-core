import {
- this.bool
- this.list
- this.unit
- this.external
- this.memory => mem
- this.arch => arch
- this.magic => magic
}

export {
- i8-array
- i8-array-new
- i8-array-access
- unsafe-copy-i8-array
}

define unsafe-copy-i8-array(source-pointer: int, target-pointer: int, index: int, from: int, to: int): unit {
  if eq-int(from, to) {
    Unit
  } else {
    let value = mem.load-i8(add-int(source-pointer, from))
    mem.store-i8(add-int(target-pointer, index), value)
    unsafe-copy-i8-array(source-pointer, target-pointer, add-int(index, 1), add-int(from, 1), to)
  }
}

resource i8-array {
- (x: int) => {
    magic.cast(unit, int, free(x))
  }
- (source-pointer: int) => {
    let u = arch.unit()
    let u2 = mul-int(u, 2)
    let from = mem.load-int(source-pointer)
    let to = mem.load-int(add-int(source-pointer, u))
    let length = sub-int(to, from)
    let target-pointer = malloc(add-int(length, u2))
    mem.store-int(target-pointer, 0)
    mem.store-int(add-int(target-pointer, u), length)
    unsafe-copy-i8-array(add-int(source-pointer, u2), add-int(target-pointer, u2), 0, from, to)
    target-pointer
  }
}

define i8-array-new(xs: list(i8)): i8-array {
  let len on xs = length(xs)
  let u = arch.unit()
  let u2 = mul-int(u, 2)
  let base-pointer = malloc(add-int(len, u2))
  mem.store-int(base-pointer, 0)
  mem.store-int(add-int(base-pointer, u), len)
  let content-pointer: int = add-int(base-pointer, u2)
  let store-values =
    mu self(values: list(i8), index: int): unit {
      match values {
      - [] =>
        Unit
      - v :: rest =>
        mem.store-i8(add-int(content-pointer, index), v)
        self(rest, add-int(index, 1))
      }
    }

  let _ = store-values(xs, 0)
  magic.cast(int, i8-array, base-pointer)
}

inline i8-array-access(xs: &i8-array, i: int): i8 {
  let ptr = magic.cast(&i8-array, int, xs)
  let u = arch.unit()
  let u2 = mul-int(u, 2)
  mem.load-i8(add-int(add-int(ptr, u2), i))
}
