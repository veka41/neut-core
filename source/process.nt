import {
  Ext,
  FD,
  Word,
  this.bool {bool},
  this.errno {Errno, report-system-error, system},
  this.except {Fail, Pass},
  this.external {free},
  this.file {close},
  this.file.descriptor {stderr, stdin, stdout},
  this.list {Cons, fold-left-index, length, list},
  this.memory {store-int},
  this.pair {Pair, pair},
  this.text {_get-content-pointer, text},
  this.text.io {print, print-int, read, write},
  this.unit {Unit, unit},
}

foreign {
  __error(): int,
  execvp(pointer, pointer): int,
  fork(): int,
  waitpid(int, pointer, int): int,
  pipe(pointer): int,
  dup2(int, int): int,
  __neut__unsafe__wifexited(pointer): int,
  __neut__unsafe__wifsignaled(pointer): int,
  __neut__unsafe__wifstopped(pointer): int,
  __neut__unsafe__wexitstatus(pointer): int,
  __neut__unsafe__wtermsig(pointer): int,
  __neut__unsafe__wcoredump(pointer): int,
  __neut__unsafe__wstopsig(pointer): int,
}

define _wifexited(ptr: int): bool {
  magic external __neut__unsafe__wifexited(ptr)
}

define _wifsignaled(ptr: int): bool {
  magic external __neut__unsafe__wifsignaled(ptr)
}

define _wifstopped(ptr: int): bool {
  magic external __neut__unsafe__wifstopped(ptr)
}

define _wexitstatus(ptr: int): int {
  magic external __neut__unsafe__wexitstatus(ptr)
}

define _wtermsig(ptr: int): int {
  magic external __neut__unsafe__wtermsig(ptr)
}

define _wcoredump(ptr: int): bool {
  magic external __neut__unsafe__wcoredump(ptr)
}

define _wstopsig(ptr: int): int {
  magic external __neut__unsafe__wstopsig(ptr)
}

define __waitpid(pid: int, status-ptr: int, option: int): int {
  magic external waitpid(pid, status-ptr, option)
}

data process-result-status {
| Exited(status: int)
| Signaled(termsig: int, coredump: bool)
| Stopped(stopsig: int)
}

define _waitpid(pid: int): system(process-result-status) {
  let status-ptr = Ext.malloc(Word.size) in
  let result = __waitpid(pid, status-ptr, 0) in
  if eq-int(result, -1) {
    free(status-ptr);
    report-system-error()
  } else {
    let stat-loc: int = magic load(int, status-ptr) in
    free(status-ptr);
    if _wifexited(stat-loc) {
      let exit-status = _wexitstatus(stat-loc) in
      Pass(Exited(exit-status))
    } else-if _wifsignaled(stat-loc) {
      let termsig = _wtermsig(stat-loc) in
      let coredump = _wcoredump(stat-loc) in
      Pass(Signaled(termsig, coredump))
    } else-if _wifstopped(stat-loc) {
      let stopsig = _wstopsig(stat-loc) in
      Pass(Stopped(stopsig))
    } else {
      // unreachable
      report-system-error()
    }
  }
}

define _make-argv(xs: list(int)): int {
  let len on xs = length(xs) in
  let ptr = Ext.malloc(mul-int(Word.size, len)) in
  fold-left-index(Unit, xs, function (_, x, i) {
    store-int(x, add-int(ptr, mul-int(Word.size, i)))
  });
  ptr
}

define _create-pipe(): system(pair(FD.descriptor, FD.descriptor)) {
  let ptr = Ext.malloc(mul-int(Word.size, 2)) in
  let result = magic external pipe(ptr) in
  if eq-int(result, -1) {
    free(ptr);
    report-system-error()
  } else {
    let reader = magic load(int32, ptr) in
    let writer = magic load(int32, add-int(ptr, 4)) in
    free(ptr);
    Pass(Pair(reader, writer))
  }
}

define _dup2(fd1: FD.descriptor, fd2: FD.descriptor): system(unit) {
  let result = magic external dup2(fd1, fd2) in
  if eq-int(result, -1) {
    report-system-error()
  } else {
    Pass(Unit)
  }
}

define _fork(): system(int) {
  let result = magic external fork() in
  if eq-int(result, -1) {
    report-system-error()
  } else {
    Pass(result)
  }
}

data process-spec {
| Process-Spec(
    process: &text,
    args: list(&text),
    input: &text,
  )
}

data process-result {
| Process-Result(
    status: process-result-status,
    stdout-text: text,
    stderr-text: text,
  )
}

define spawn(ps: process-spec): system(process-result) {
  try Pair(in-reader, in-writer) = _create-pipe() in
  try Pair(out-reader, out-writer) = _create-pipe() in
  try Pair(error-reader, error-writer) = _create-pipe() in
  try pid = _fork() in
  if eq-int(pid, -1) {
    report-system-error()
  } else-if eq-int(pid, 0) {
    try _ = close(in-writer) in
    try _ = close(out-reader) in
    try _ = close(error-reader) in
    try _ = _dup2(in-reader, stdin) in
    try _ = _dup2(out-writer, stdout) in
    try _ = _dup2(error-writer, stderr) in
    use ps {process, args} in
    let foo = this.list.map(_get-content-pointer, Cons(process, args)) in
    let buz = _make-argv(this.list.append(foo, [0])) in
    let cmd = _get-content-pointer(process) in
    magic external execvp(cmd, buz);
    report-system-error()
  } else {
    try _ = close(in-reader) in
    try _ = close(out-writer) in
    try _ = close(error-writer) in
    use ps {input} in
    try _ = write(input, in-writer) in
    try _ = close(in-writer) in
    try stdout-text = read(out-reader) in
    try stderr-text = read(error-reader) in
    try status = _waitpid(pid) in
    Pass(Process-Result of {
      status,
      stdout-text,
      stderr-text,
    })
  }
}

define _print-process-result-status(st: process-result-status): unit {
  match st {
  | Exited(status) =>
    print-int(status)
  | Signaled(_, _) =>
    Unit
  | Stopped(_) =>
    Unit
  }
}

define zen(): unit {
  let cmd =
    Process-Spec of {
      process = "ls",
      args = ["-a", "-l"],
      input = "",
    }
  in
  match spawn(cmd) {
  | Pass(result) =>
    use result {stdout-text, stderr-text, status} in
    let _ on stdout-text = print(stdout-text) in
    let _ on stderr-text = print(stderr-text) in
    let _ = stdout-text in
    let _ = stderr-text in
    print("exit-code: ");
    _print-process-result-status(status);
    print("\n");
    print("success\n")
  | Fail(Errno(num)) =>
    print("fail: ");
    print-int(num)
  }
}
