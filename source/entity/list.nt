import {
  this.bool {False, True, bool},
  this.entity {entity},
  this.list {Cons, Nil, list},
}

inline _elem<a>(e: entity(&a)): (x: &a, xs: &list(a)) -> bool {
  define self(x: &a, xs: &list(a)): bool {
    case xs {
    | Nil =>
      False
    | Cons(y, ys) =>
      if e::identity(x, y) {
        True
      } else {
        self(x, ys)
      }
    }
  }
}

data trope(a) {
| Trope(
    elem: (x: &a, xs: &list(a)) -> bool,
  )
}

inline from-entity<a>(e: entity(&a)): trope(a) {
  Trope of {
    elem = _elem(e),
  }
}
