import {
  Ext,
  L,
  Magic,
  Mem,
  Word,
  this.bool {bool},
  this.box,
  this.control {discard},
  this.either {Right, none},
  this.external {free, malloc},
  this.int {max-int, min-int},
  this.list {Cons, Nil, fold-left-N, length, list},
  this.unit {Unit, unit},
}

foreign {
  llvm.memcpy.p0.p0.i64(pointer, pointer, int64, int1): void,
}

define _copy-binary(source-pointer: int, target-pointer: int, index: int, to: int): unit {
  if eq-int(index, to) {
    Unit
  } else {
    let value = Mem.load-int8(add-int(source-pointer, index)) in
    Mem.store-int8(value, add-int(target-pointer, index));
    _copy-binary(source-pointer, target-pointer, add-int(index, 1), to)
  }
}

// int8-array
// internal representation: (head-index, last-index, byte-0, byte-1, ..., byte-n)
resource binary {
  function (x: int) {
    Magic.cast(unit, int, free(x))
  },
  function (source-pointer: int) {
    let u = Word.size in
    let u2 = mul-int(u, 2) in
    let from = Mem.load-int(source-pointer) in
    let to = Mem.load-int(add-int(source-pointer, u)) in
    let length = sub-int(to, from) in
    let target-pointer = malloc(add-int(length, u2)) in
    Mem.store-int(0, target-pointer);
    Mem.store-int(length, add-int(target-pointer, u));
    let source-pointer' = add-int(add-int(source-pointer, u2), from) in
    _copy-binary(source-pointer', add-int(target-pointer, u2), 0, to);
    target-pointer
  },
}

define binary-length(xs: &binary): int {
  let source-pointer = magic cast(&binary, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(source-pointer) in
  let to = Mem.load-int(add-int(source-pointer, u)) in
  sub-int(to, from)
}

define allocate(len: int): binary {
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let base-pointer = malloc(add-int(len, u2)) in
  Mem.store-int(0, base-pointer);
  Mem.store-int(len, add-int(base-pointer, u));
  let content-pointer: int = add-int(base-pointer, u2) in
  let store-values =
    define self(index: int): unit {
      if ge-int(index, len) {
        Unit
      } else {
        Mem.store-int8(0, add-int(content-pointer, index));
        self(add-int(index, 1))
      }
    }
  in
  let _ = store-values(0) in
  Magic.cast(int, binary, base-pointer)
}

define binary-new(xs: list(int8)): binary {
  let len on xs = length(xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let base-pointer = malloc(add-int(len, u2)) in
  Mem.store-int(0, base-pointer);
  Mem.store-int(len, add-int(base-pointer, u));
  let content-pointer: int = add-int(base-pointer, u2) in
  let store-values =
    define self(values: list(int8), index: int): unit {
      match values {
      | Nil =>
        Unit
      | Cons(v, rest) =>
        Mem.store-int8(v, add-int(content-pointer, index));
        self(rest, add-int(index, 1))
      }
    }
  in
  let _ = store-values(xs, 0) in
  Magic.cast(int, binary, base-pointer)
}

define binary-access(xs: &binary, i: int): int8 {
  let ptr = Magic.cast(&binary, int, xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  Mem.load-int8(add-int(add-int(ptr, u2), i))
}

define _get-content-pointer(t: &binary): int {
  let ptr = Magic.cast(&binary, int, t) in
  let from = Mem.load-int(ptr) in
  let u = Word.size in
  add-int(add-int(ptr, mul-int(u, 2)), from)
}

define join(xs: list(binary)): binary {
  let len on xs =
    fold-left-N(0, xs, function (acc, x) {
      add-int(acc, binary-length(x))
    })
  in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let new-binary = Ext.malloc(add-int(len, u2)) in
  Mem.store-int(0, new-binary);
  Mem.store-int(len, add-int(new-binary, u));
  let content-ptr = add-int(new-binary, u2) in
  let loop =
    define self(offset: int, xs: list(binary)): unit {
      match xs {
      | Nil =>
        Unit
      | Cons(x, rest) =>
        let current-content-ptr = add-int(content-ptr, offset) in
        let x-ptr on x = _get-content-pointer(x) in
        let x-len on x = binary-length(x) in
        _copy-binary(x-ptr, current-content-ptr, 0, x-len);
        discard(x);
        self(add-int(offset, x-len), rest)
      }
    }
  in
  loop(0, xs);
  magic cast(int, binary, new-binary)
}

define join-N(xs: list(&binary)): binary {
  let len on xs =
    fold-left-N(0, xs, function (acc, x) {
      add-int(acc, binary-length(*x))
    })
  in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let new-binary = Ext.malloc(add-int(len, u2)) in
  Mem.store-int(0, new-binary);
  Mem.store-int(len, add-int(new-binary, u));
  let content-ptr = add-int(new-binary, u2) in
  let loop =
    define self(offset: int, xs: list(&binary)): unit {
      match xs {
      | Nil =>
        Unit
      | Cons(x, rest) =>
        let current-content-ptr = add-int(content-ptr, offset) in
        let x-ptr = _get-content-pointer(x) in
        let x-len = binary-length(x) in
        _copy-binary(x-ptr, current-content-ptr, 0, x-len);
        discard(x);
        self(add-int(offset, x-len), rest)
      }
    }
  in
  loop(0, xs);
  magic cast(int, binary, new-binary)
}

define append(t1: &binary, t2: &binary): binary {
  let p1 = Magic.cast(&binary, int, t1) in
  let p2 = Magic.cast(&binary, int, t2) in
  let from1 = Mem.load-int(p1) in
  let from2 = Mem.load-int(p2) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let to1 = Mem.load-int(add-int(p1, u)) in
  let to2 = Mem.load-int(add-int(p2, u)) in
  let len1 = sub-int(to1, from1) in
  let len2 = sub-int(to2, from2) in
  let new-len = add-int(len1, len2) in
  let content1 = add-int(p1, u2) in
  let content2 = add-int(p2, u2) in
  let new-binary = Ext.malloc(add-int(new-len, u2)) in
  Mem.store-int(0, new-binary);
  Mem.store-int(new-len, add-int(new-binary, u));
  let !store-values =
    define store-values(target-pointer: int, content-array: int, current-index: int, array-length: int): unit {
      if eq-int(current-index, array-length) {
        Unit
      } else {
        let char = Mem.load-int8(add-int(content-array, current-index)) in
        Mem.store-int8(char, add-int(target-pointer, current-index));
        store-values(target-pointer, content-array, add-int(current-index, 1), array-length)
      }
    }
  in
  let str-pointer = add-int(new-binary, u2) in
  !store-values(str-pointer, add-int(content1, from1), 0, len1);
  !store-values(add-int(str-pointer, len1), add-int(content2, from2), 0, len2);
  Magic.cast(int, binary, new-binary)
}

// O(1)
define drop(t: binary, offset: int): binary {
  let offset = max-int(0, offset) in
  let _ on t =
    let ptr = Magic.cast(&binary, int, t) in
    let from = Mem.load-int(ptr) in
    let to-ptr = add-int(ptr, Word.size) in
    let to = Mem.load-int(to-ptr) in
    Mem.store-int(min-int(to, add-int(from, offset)), ptr)
  in
  t
}

// O(1)
define take(t: binary, offset: int): binary {
  let offset = max-int(0, offset) in
  let _ on t =
    let ptr = Magic.cast(&binary, int, t) in
    let from = Mem.load-int(ptr) in
    let to-ptr = add-int(ptr, Word.size) in
    let to = Mem.load-int(to-ptr) in
    Mem.store-int(min-int(to, add-int(from, offset)), to-ptr)
  in
  t
}

// O(1)
define slice(t: binary, start: int, size: int): binary {
  take(drop(t, start), size)
}

define drop-N(t: &binary, offset: int): binary {
  let content-ptr = _get-content-pointer(t) in
  let orig-size = binary-length(t) in
  let new-size = max-int(0, sub-int(orig-size, offset)) in
  let new-ptr = Ext.malloc(add-int(new-size, mul-int(Word.size, 2))) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(new-size, add-int(new-ptr, Word.size));
  let new-content-ptr = add-int(new-ptr, mul-int(Word.size, 2)) in
  let adjusted-offset = min-int(offset, orig-size) in
  let content-ptr' = add-int(content-ptr, adjusted-offset) in
  _copy-binary(content-ptr', new-content-ptr, 0, new-size);
  Magic.cast(int, binary, new-ptr)
}

define take-N(t: &binary, offset: int): binary {
  let ptr = core.magic.cast(&binary, int, t) in
  let to = Mem.load-int(add-int(ptr, core.word.size)) in
  let new-size = min-int(to, offset) in
  let new-ptr = Ext.malloc(add-int(offset, mul-int(core.word.size, 2))) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(new-size, add-int(new-ptr, core.word.size));
  let content-ptr = _get-content-pointer(t) in
  let new-content-ptr = add-int(new-ptr, mul-int(core.word.size, 2)) in
  _copy-binary(content-ptr, new-content-ptr, 0, new-size);
  core.magic.cast(int, binary, new-ptr)
}

define slice-N(t: &binary, start: int, size: int): binary {
  let start = max-int(start, 0) in
  let size = max-int(size, 0) in
  let ptr = Magic.cast(&binary, int, t) in
  let content-ptr = _get-content-pointer(t) in
  let to-ptr = add-int(ptr, Word.size) in
  let to = Mem.load-int(to-ptr) in
  let new-size = min-int(size, to) in
  let new-ptr = Ext.malloc(add-int(new-size, mul-int(Word.size, 2))) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(new-size, add-int(new-ptr, Word.size));
  let new-content-ptr = add-int(new-ptr, mul-int(Word.size, 2)) in
  _copy-binary(add-int(content-ptr, start), new-content-ptr, 0, new-size);
  Magic.cast(int, binary, new-ptr)
}

define take-end(t: binary, offset: int): binary {
  let len on t = binary-length(t) in
  drop(t, sub-int(len, offset))
}

define take-end-N(t: &binary, offset: int): binary {
  let len = binary-length(t) in
  drop-N(t, sub-int(len, offset))
}

define drop-end(t: binary, offset: int): binary {
  let len on t = binary-length(t) in
  take(t, sub-int(len, offset))
}

define drop-end-N(t: &binary, offset: int): binary {
  let len = binary-length(t) in
  take-N(t, sub-int(len, offset))
}

define intercalate(xs: list(binary), sep: binary): binary {
  join(this.list.intercalate(xs, sep))
}

define intercalate-N(xs: list(&binary), sep: &binary): binary {
  join-N(this.list.intercalate(xs, sep))
}

define find(xs: &binary, pred: (int8) -> bool): ?int {
  let len = binary-length(xs) in
  let f =
    define self(index: int): ?int {
      if ge-int(index, len) {
        none()
      } else {
        let ch = binary-access(xs, index) in
        if pred(ch) {
          Right(index)
        } else {
          self(add-int(index, 1))
        }
      }
    }
  in
  f(0)
}

define find-end(xs: &binary, pred: (int8) -> bool): ?int {
  let len = binary-length(xs) in
  let f =
    define self(xs: &binary, index: int): ?int {
      if lt-int(index, 0) {
        none()
      } else {
        let ch = binary-access(xs, index) in
        if pred(ch) {
          Right(sub-int(len, add-int(index, 1)))
        } else {
          self(xs, sub-int(index, 1))
        }
      }
    }
  in
  f(xs, sub-int(len, 1))
}
