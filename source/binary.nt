import {
  Magic,
  Mem,
  Word,
  this.bool,
  this.external {free, malloc},
  this.list {Cons, Nil, length, list},
  this.unit {Unit, unit},
}

define _copy-binary(source-pointer: int, target-pointer: int, index: int, to: int): unit {
  if eq-int(index, to) {
    Unit
  } else {
    let value = Mem.load-int8(add-int(source-pointer, index)) in
    Mem.store-int8(value, add-int(target-pointer, index));
    _copy-binary(source-pointer, target-pointer, add-int(index, 1), to)
  }
}

// int8-array
// internal representation: (head-index, last-index, byte-0, byte-1, ..., byte-n)
resource binary {
  function (x: int) {
    Magic.cast(unit, int, free(x))
  },
  function (source-pointer: int) {
    let u = Word.size in
    let u2 = mul-int(u, 2) in
    let from = Mem.load-int(source-pointer) in
    let to = Mem.load-int(add-int(source-pointer, u)) in
    let length = sub-int(to, from) in
    let target-pointer = malloc(add-int(length, u2)) in
    Mem.store-int(0, target-pointer);
    Mem.store-int(length, add-int(target-pointer, u));
    let source-pointer' = add-int(add-int(source-pointer, u2), from) in
    _copy-binary(source-pointer', add-int(target-pointer, u2), 0, to);
    target-pointer
  },
}

define binary-length(xs: &binary): int {
  let source-pointer = magic cast(&binary, int, xs) in
  let u = Word.size in
  let from = Mem.load-int(source-pointer) in
  let to = Mem.load-int(add-int(source-pointer, u)) in
  sub-int(to, from)
}

define binary-new(xs: list(int8)): binary {
  let len on xs = length(xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let base-pointer = malloc(add-int(len, u2)) in
  Mem.store-int(0, base-pointer);
  Mem.store-int(len, add-int(base-pointer, u));
  let content-pointer: int = add-int(base-pointer, u2) in
  let store-values =
    define self(values: list(int8), index: int): unit {
      match values {
      | Nil =>
        Unit
      | Cons(v, rest) =>
        Mem.store-int8(v, add-int(content-pointer, index));
        self(rest, add-int(index, 1))
      }
    }
  in
  let _ = store-values(xs, 0) in
  Magic.cast(int, binary, base-pointer)
}

define binary-access(xs: &binary, i: int): int8 {
  let ptr = Magic.cast(&binary, int, xs) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  Mem.load-int8(add-int(add-int(ptr, u2), i))
}

define _get-content-pointer(t: &binary): int {
  let ptr = Magic.cast(&binary, int, t) in
  let from = Mem.load-int(ptr) in
  let u = Word.size in
  add-int(add-int(ptr, mul-int(u, 2)), from)
}
