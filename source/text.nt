import {
  Ext,
  L,
  Magic,
  Mem,
  Word,
  this.bool {False, True, bool},
  this.control {discard},
  this.int8-array {int8-array, int8-array-access, int8-array-length, int8-array-new, unsafe-copy-int8-array},
  this.list {Cons, Nil, fold-left-noetic, list},
  this.memory {load-int, load-int8},
  this.pair {Pair, pair},
  this.unit {Unit, unit},
}

data text {
| Text(content: int8-array)
}

define create(xs: L.list(int8)): text {
  magic cast(int8-array, text, int8-array-new(xs))
}

define empty(): text {
  create([])
}

inline text-byte-length(t: &text): int {
  let ptr = magic cast(&text, &int8-array, t) in
  int8-array-length(ptr)
}

define unsafe-get-content-pointer(t: &text): int {
  let ptr = Magic.cast(&text, int, t) in
  let from = Mem.load-int(ptr) in
  let u = Word.size in
  add-int(add-int(ptr, mul-int(u, 2)), from)
}

define join(xs: list(text)): text {
  let len on xs =
    fold-left-noetic(0, xs, function (acc, x) {
      add-int(acc, text-byte-length(x))
    })
  in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let new-text = Ext.malloc(add-int(len, u2)) in
  Mem.store-int(0, new-text);
  Mem.store-int(len, add-int(new-text, u));
  let content-ptr = add-int(new-text, u2) in
  let loop =
    define self(offset: int, xs: list(text)): unit {
      match xs {
      | Nil =>
        Unit
      | Cons(x, rest) =>
        let current-content-ptr = add-int(content-ptr, offset) in
        let x-ptr on x = unsafe-get-content-pointer(x) in
        let x-len on x = text-byte-length(x) in
        unsafe-copy-int8-array(x-ptr, current-content-ptr, 0, 0, x-len);
        discard(x);
        self(add-int(offset, x-len), rest)
      }
    }
  in
  loop(0, xs);
  magic cast(int, text, new-text)
}

define append(t1: &text, t2: &text): text {
  let p1 = Magic.cast(&text, int, t1) in
  let p2 = Magic.cast(&text, int, t2) in
  let from1 = Mem.load-int(p1) in
  let from2 = Mem.load-int(p2) in
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let to1 = Mem.load-int(add-int(p1, u)) in
  let to2 = Mem.load-int(add-int(p2, u)) in
  let len1 = sub-int(to1, from1) in
  let len2 = sub-int(to2, from2) in
  let new-len = add-int(len1, len2) in
  let content1 = add-int(p1, u2) in
  let content2 = add-int(p2, u2) in
  let new-text = Ext.malloc(add-int(new-len, u2)) in
  Mem.store-int(0, new-text);
  Mem.store-int(new-len, add-int(new-text, u));
  let store-values =
    define store-values(target-pointer: int, content-array: int, current-index: int, array-length: int): unit {
      if eq-int(current-index, array-length) {
        Unit
      } else {
        let char = Mem.load-int8(add-int(content-array, current-index)) in
        Mem.store-int8(char, add-int(target-pointer, current-index));
        store-values(target-pointer, content-array, add-int(current-index, 1), array-length)
      }
    }
  in
  let str-pointer = add-int(new-text, u2) in
  store-values(str-pointer, add-int(content1, from1), 0, len1);
  store-values(add-int(str-pointer, len1), add-int(content2, from2), 0, len2);
  Magic.cast(int, text, new-text)
}

define get-text-length-of-int(x: int, acc: int): int {
  if lt-int(x, 0) {
    get-text-length-of-int(mul-int(x, -1), add-int(acc, 1))
  } else {
    let q = div-int(x, 10) in
    if eq-int(q, 0) {
      add-int(acc, 1)
    } else {
      get-text-length-of-int(q, add-int(acc, 1))
    }
  }
}

define access(haystack: &text, cursor: int): int8 {
  int8-array-access(magic cast(&text, &int8-array, haystack), cursor)
}

define is-empty(t: &text): bool {
  eq-int(text-byte-length(t), 0)
}

define from-int(x: int): text {
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let len = get-text-length-of-int(x, 0) in
  let ptr = Ext.malloc(add-int(len, u2)) in
  Mem.store-int(0, ptr);
  Mem.store-int(len, add-int(ptr, u));
  let content = add-int(ptr, u2) in
  let store-positive-values =
    define loop(y: int, index: int): unit {
      if lt-int(y, 10) {
        // 48 == "0"
        let digit-char = add-int8(Magic.cast(int, int8, y), 48) in
        Mem.store-int8(digit-char, add-int(content, index))
      } else {
        let q = div-int(y, 10) in
        let r = rem-int(y, 10) in
        let digit-char = add-int8(Magic.cast(int, int8, r), 48) in
        Mem.store-int8(digit-char, add-int(content, index));
        loop(q, sub-int(index, 1))
      }
    }
  in
  if lt-int(x, 0) {
    // 45 == "-"
    Mem.store-int8(45, content);
    store-positive-values(mul-int(x, -1), sub-int(len, 1))
  } else {
    store-positive-values(x, sub-int(len, 1))
  };
  Magic.cast(int, text, ptr)
}

define unsafe-get-c-string-length(ptr: int, index: int): int {
  let c = Mem.load-int8(add-int(ptr, index)) in
  if eq-int8(c, 0) {
    index
  } else {
    unsafe-get-c-string-length(ptr, add-int(index, 1))
  }
}

define unsafe-from-c-string(old-ptr: int): text {
  let u = Word.size in
  let u2 = mul-int(u, 2) in
  let len = unsafe-get-c-string-length(old-ptr, 0) in
  let new-ptr = Ext.malloc(add-int(len, u2)) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(len, add-int(new-ptr, u));
  unsafe-copy-int8-array(old-ptr, add-int(new-ptr, u2), 0, 0, len);
  Magic.cast(int, text, new-ptr)
}

define _min-int(x: int, y: int): int {
  if lt-int(x, y) {
    x
  } else {
    y
  }
}

define drop(offset: int, t: text): text {
  let _ on t =
    let ptr = Magic.cast(&text, int, t) in
    let from = Mem.load-int(ptr) in
    let to-ptr = add-int(ptr, Word.size) in
    let to = Mem.load-int(to-ptr) in
    Mem.store-int(_min-int(to, add-int(from, offset)), ptr)
  in
  t
}

define take(offset: int, t: text): text {
  let _ on t =
    let ptr = Magic.cast(&text, int, t) in
    let from = Mem.load-int(ptr) in
    let to-ptr = add-int(ptr, Word.size) in
    let to = Mem.load-int(to-ptr) in
    Mem.store-int(_min-int(to, add-int(from, offset)), to-ptr)
  in
  t
}

define dropN(offset: int, t: &text): text {
  // get info from old text
  let ptr = Magic.cast(&text, int, t) in
  let content-ptr = add-int(ptr, mul-int(Word.size, 2)) in
  let from = Mem.load-int(ptr) in
  let to-ptr = add-int(ptr, Word.size) in
  let to = Mem.load-int(to-ptr) in
  let new-from = _min-int(to, add-int(from, offset)) in
  let new-size = sub-int(to, new-from) in
  // write info to new ptr
  let new-ptr = Ext.malloc(add-int(new-size, mul-int(Word.size, 2))) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(new-size, add-int(new-ptr, Word.size));
  let new-content-ptr = add-int(new-ptr, mul-int(Word.size, 2)) in
  unsafe-copy-int8-array(content-ptr, new-content-ptr, 0, new-from, to);
  Magic.cast(int, text, new-ptr)
}

define takeN(offset: int, t: &text): text {
  // get info from old text
  let ptr = core.magic.cast(&text, int, t) in
  let to = Mem.load-int(add-int(ptr, core.word.size)) in
  let new-size = _min-int(to, offset) in
  let new-ptr = Ext.malloc(add-int(offset, mul-int(core.word.size, 2))) in
  Mem.store-int(0, new-ptr);
  Mem.store-int(new-size, add-int(new-ptr, core.word.size));
  let content-ptr = unsafe-get-content-pointer(t) in
  let new-content-ptr = add-int(new-ptr, mul-int(core.word.size, 2)) in
  unsafe-copy-int8-array(content-ptr, new-content-ptr, 0, 0, new-size);
  core.magic.cast(int, text, new-ptr)
}

define _match-text-content(ptr1: int, ptr2: int, len: int): bool {
  let f =
    define helper(cursor: int): bool {
      if eq-int(cursor, len) {
        True
      } else {
        let c1: int8 = Mem.load-int8(add-int(ptr1, cursor)) in
        let c2: int8 = Mem.load-int8(add-int(ptr2, cursor)) in
        if eq-int8(c1, c2) {
          helper(add-int(cursor, 1))
        } else {
          False
        }
      }
    }
  in
  f(0)
}

define break-on(needle: &text, haystack: &text): pair(text, text) {
  let ptr = unsafe-get-content-pointer(haystack) in
  let ptr2 = unsafe-get-content-pointer(needle) in
  let len = text-byte-length(haystack) in
  let needle-len = text-byte-length(needle) in
  let f =
    define loop(cursor: int): pair(text, text) {
      let rem-len = sub-int(len, cursor) in
      if lt-int(rem-len, needle-len) {
        Pair(*haystack, empty())
      } else {
        let ptr1 = add-int(ptr, cursor) in
        if _match-text-content(ptr1, ptr2, needle-len) {
          let former = takeN(cursor, haystack) in
          let latter = dropN(cursor, haystack) in
          Pair(former, latter)
        } else {
          loop(add-int(cursor, 1))
        }
      }
    }
  in
  f(0)
}

define _appendR(t1: text, t2: text): text {
  let t on t1, t2 = append(t1, t2) in
  let _ = t1 in
  let _ = t2 in
  t
}

define format(fmt: &text, args: list(text)): text {
  match args {
  | Nil =>
    *fmt
  | Cons(arg, rest) =>
    let Pair(before, after) = break-on("{}", fmt) in
    let no-hole on after = this.text.is-empty(after) in
    if no-hole {
      before
    } else {
      let after' = drop(2, after) in
      let result on after' = _appendR(before, _appendR(arg, format(after', rest))) in
      let _ = after' in
      result
    }
  }
}

define intercalate(sep: text, xs: list(text)): text {
  join(this.list.intercalate(sep, xs))
}

data _char {
| _Char1
| _Char2
| _Char3
| _Char4
| _Invalid
}

define _char-as-int(c: _char): int {
  match c {
  | _Char1 =>
    1
  | _Char2 =>
    2
  | _Char3 =>
    3
  | _Char4 =>
    4
  | _Invalid =>
    // for now
    0
  }
}

define _get-head-char(t: &text, index: int): int8 {
  let ptr = magic cast(&text, int, t) in
  let from = load-int(ptr) in
  load-int8(add-int(add-int(ptr, mul-int(Word.size, 2)), add-int(from, index)))
}

define _categorize-char(char: int8): _char {
  if eq-int8(and-int8(char, 0x80), 0x00) {
    // 0x00 = 0000 0000
    // 0x80 = 1000 0000
    _Char1
  } else-if eq-int8(and-int8(char, 0xE0), 0xC0) {
    // 0xC0 = 1100 0000
    // 0xE0 = 1110 0000
    _Char2
  } else-if eq-int8(and-int8(char, 0xF0), 0xE0) {
    // 0xE0 = 1110 0000
    // 0xF0 = 1111 0000
    _Char3
  } else-if eq-int8(and-int8(char, 0xF8), 0xF0) {
    // 0xF0 = 1111 0000
    // 0xF8 = 1111 1000
    _Char4
  } else {
    _Invalid
  }
}

define _length(t: &text, len: int, index: int, acc: int): int {
  if ge-int(index, len) {
    acc
  } else {
    let head-char = _get-head-char(t, index) in
    let category = _categorize-char(head-char) in
    let char-len = _char-as-int(category) in
    _length(t, len, add-int(index, char-len), add-int(acc, 1))
  }
}

define length(t: &text): int {
  let len = text-byte-length(t) in
  _length(t, len, 0, 0)
}
