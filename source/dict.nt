import {
- lo [loset, Loset]
- core.order [LT, GT, EQ]
- core.text
- core.bool
- core.unit
- core.except [none, Fail, Pass]
- core.system
}

// size balanced tree
data dict(k, v) {
- Tip
- Bin of {
  - size: int
  - key: k
  - value: v
  - left: dict(k, v)
  - right: dict(k, v)
  }
}

data class(k, v) {
- Dict of {
  - empty: dict(k, v)
  - singleton: (k, v) -> dict(k, v)
  - insert: (k, v, dict(k, v)) -> dict(k, v)
  - lookup: (&k, &dict(k, v)) -> ?&v
  - delete: (k, dict(k, v)) -> dict(k, v)
  }
}

inline fromLoset[k, v](_loset: loset(k)): class(k, v) {
  Dict of {
  - empty = empty()
  - singleton = (k, v) => { singleton(k, v) }
  - insert = insert(_loset)
  - lookup = lookup(_loset)
  - delete = delete(_loset)
  }
}

inline size[k, v](d: &dict(k, v)): int {
  case d {
  - Tip =>
    0
  - Bin of { size } =>
    *size
  }
}

inline empty[k, v](): dict(k, v) {
  Tip
}

inline singleton[k, v](key: k, value: v): dict(k, v) {
  Bin of { size = 1, left = Tip, right = Tip, key, value }
}

inline insert[k, v](_l: loset(k)): (k, v, dict(k, v)) -> dict(k, v) {
  let Loset of { cmp } = _l in
  mu self(keyX, valX, d) {
    match d {
    - Tip =>
      singleton(keyX, valX)
    - Bin(size, keyY, valY, left, right) =>
      let order on keyX, keyY = cmp(keyX, keyY) in
      match order {
      - LT =>
        _balanceL(keyY, valY, self(keyX, valX, left), right)
      - GT =>
        _balanceR(keyY, valY, left, self(keyX, valX, right))
      - EQ =>
        Bin(size, keyX, valX, left, right)
      }
    }
  }
}

inline lookup[k, v](_l: loset(k)): (&k, &dict(k, v)) -> ?&v {
  let Loset of { cmp } = _l in
  mu self(needle: &k, d: &dict(k, v)) {
    case d {
    - Tip =>
      none()
    - Bin(_, k, x, l, r) =>
      match cmp(needle, k) {
      - LT =>
        self(needle, l)
      - GT =>
        self(needle, r)
      - EQ =>
        Pass(x)
      }
    }
  }
}

// define delete[k, v](_l: loset(k), needle: k, d: dict(k, v)): dict(k, v) {
inline delete[k, v](_l: loset(k)): (k, dict(k, v)) -> dict(k, v) {
  mu self(needle, d) {
    let Loset of { cmp } = _l in
    match d {
    - Tip =>
      Tip
    - Bin(_, kx, x, l, r) =>
      let order on needle, kx = cmp(needle, kx) in
      match order {
      - LT =>
        _balanceR(kx, x, self(needle, l), r)
      - GT =>
        _balanceL(kx, x, l, self(needle, r))
      - EQ =>
        _glue(l, r)
      }
    }
  }
}

constant _delta: int {
  3
}

constant _ratio: int {
  2
}

define _glue[k, v](d1: dict(k, v), d2: dict(k, v)): dict(k, v) {
  match d1, d2 {
  - Tip, d2 =>
    d2
  - d1, Tip =>
    d1
  - Bin(ls, lk, lx, ll, lr), Bin(rs, rk, rx, rl, rr) =>
    if gt-int(ls, rs) {
      let _View of { key, value, dict } = _maxViewSure(lk, lx, ll, lr) in
      _balanceR(key, value, dict, Bin(rs, rk, rx, rl, rr))
    } else {
      let _View of { key, value, dict } = _minViewSure(rk, rx, rl, rr) in
      _balanceR(key, value, dict, Bin(ls, lk, lx, ll, lr))
    }
  }
}

data _view(k, a) {
- _View of {
  - key: k
  - value: a
  - dict: dict(k, a)
  }
}

define _minViewSure[a, b](k: a, x: b, l: dict(a, b), r: dict(a, b)): _view(a, b) {
  match l {
  - Tip =>
    _View(k, x, r)
  - Bin(_, lk, lx, ll, lr) =>
    let _View of { key, value, dict = l' } = _minViewSure(lk, lx, ll, lr) in
    _View(key, value, _balanceR(k, x, l', r))
  }
}

define _maxViewSure[a, b](k: a, x: b, l: dict(a, b), r: dict(a, b)): _view(a, b) {
  match r {
  - Tip =>
    _View(k, x, l)
  - Bin(_, rk, rx, rl, rr) =>
    let _View of { key, value, dict = r' } = _maxViewSure(rk, rx, rl, rr) in
    _View(key, value, _balanceL(k, x, l, r'))
  }
}

inline _balanceL[a, b](k: a, x: b, l: dict(a, b), r: dict(a, b)): dict(a, b) {
  match r {
  - Tip =>
    match l {
    - Tip => singleton(k, x)
    - Bin(ls, lk, lx, ll, lr) =>
      // -1
      match ll, lr {
      - Tip, Tip =>
        Bin(2, k, x, l, Tip) // 0
      - Tip, Bin(_, lrk, lrx, _, _) =>
        // -2
        Bin(3, lrk, lrx, Bin(1, lk, lx, Tip, Tip), Bin(1, k, x, Tip, Tip)) // +1
      - Bin(lls, llk, llx, lll, llr), Tip =>
        // -2
        Bin(3, lk, lx, Bin(lls, llk, llx, lll, llr), Bin(1, k, x, Tip, Tip)) // +1
      - Bin(lls, llk, llx, lll, llr), Bin(lrs, lrk, lrx, lrl, lrr) =>
        // -3
        if lt-int(lrs, mul-int(_ratio, lls)) {
          let ll = Bin(lls, llk, llx, lll, llr) in
          let lr = Bin(lrs, lrk, lrx, lrl, lrr) in
          Bin(add-int(1, ls), lk, lx, ll, Bin(add-int(1, lrs), k, x, lr, Tip)) // +1
        } else {
          let ll = Bin(lls, llk, llx, lll, llr) in
          let lrls on lrl = size(lrl) in
          let lrrs on lrr = size(lrr) in
          let ls' = add-int(1, add-int(lls, lrls)) in
          let rs' = add-int(1, lrrs) in
          Bin(add-int(1, ls), lrk, lrx, Bin(ls', lk, lx, ll, lrl), Bin(rs', k, x, lrr, Tip)) // +1
        }
      }
    }
  - Bin(rs, rk, rx, rl, rr) =>
    // -1
    match l {
    - Tip =>
      // -1
      let r = Bin(rs, rk, rx, rl, rr) in
      Bin(add-int(1, rs), k, x, Tip, r) // +1
    - Bin(ls, lk, lx, ll, lr) =>
      // -2
      if gt-int(ls, mul-int(_delta, rs)) {
        match ll, lr {
        - Bin(lls, llk, llx, lll, llr), Bin(lrs, lrk, lrx, lrl, lrr) =>
          // -4
          let lrls on lrl = size(lrl) in
          let lrrs on lrr = size(lrr) in
          let ll = Bin(lls, llk, llx, lll, llr) in
          let lr = Bin(lrs, lrk, lrx, lrl, lrr) in
          let r = Bin(rs, rk, rx, rl, rr) in
          if lt-int(lrs, mul-int(_ratio, lls)) {
            let s' = add-int(1, add-int(ls, rs)) in
            let rs' = add-int(1, add-int(rs, lrs)) in
            Bin(s', lk, lx, ll, Bin(rs', k, x, lr, r)) // +1
          } else {
            let s' = add-int(1, add-int(ls, rs)) in
            let ls' = add-int(1, add-int(lls, lrls)) in
            let rs' = add-int(1, add-int(rs, lrrs)) in
            Bin(s', lrk, lrx, Bin(ls', lk, lx, ll, lrl), Bin(rs', k, x, lrr, r)) // +2
          }
        - _, _ =>
          let tip = core.system.admit(_, "failure in core.dict._balanceL") in
          Bin(ls, lk, lx, Bin(ls, lk, lx, tip, tip), Bin(ls, lk, lx, tip, tip)) // +1
        }
      } else {
        let s' = add-int(1, add-int(ls, rs)) in
        let l = Bin(ls, lk, lx, ll, lr) in
        let r = Bin(rs, rk, rx, rl, rr) in
        Bin(s', k, x, l, r) // +1
      }
    }
  }
}

inline _balanceR[a, b](k: a, x: b, l: dict(a, b), r: dict(a, b)): dict(a, b) {
  match l {
  - Tip =>
    match r {
    - Tip => singleton(k, x)
    - Bin(rs, rk, rx, rl, rr) =>
      // -1
      match rl, rr {
      - Tip, Tip =>
        Bin(2, k, x, Tip, r)
      - Tip, Bin(rrs, rrk, rrx, rrl, rrr) =>
        // -2
        Bin(3, rk, rx, Bin(1, k, x, Tip, Tip), Bin(rrs, rrk, rrx, rrl, rrr)) // +1
      - Bin(_, rlk, rlx, _, _), Tip =>
        // -2
        Bin(3, rlk, rlx, Bin(1, k, x, Tip, Tip), Bin(1, rk, rx, Tip, Tip)) // +1
      - Bin(rls, rlk, rlx, rll, rlr), Bin(rrs, rrk, rrx, rrl, rrr) =>
        // -3
        if lt-int(rls, mul-int(_ratio, rrs)) {
          let rl = Bin(rls, rlk, rlx, rll, rlr) in
          let rr = Bin(rrs, rrk, rrx, rrl, rrr) in
          Bin(add-int(1, rs), rk, rx, Bin(add-int(1, rls), k, x, Tip, rl), rr) // +1
        } else {
          let rr = Bin(rrs, rrk, rrx, rrl, rrr) in
          let rlrs on rlr = size(rlr) in
          let rlls on rll = size(rll) in
          let rs' = add-int(1, rlls) in
          let ls' = add-int(1, add-int(rrs, rlrs)) in
          Bin(add-int(1, rs), rlk, rlx, Bin(rs', k, x, Tip, rll), Bin(ls', rk, rx, rlr, rr)) // +1
        }
      }
    }
  - Bin(ls, lk, lx, ll, lr) =>
    // -1
    match r {
    - Tip =>
      // -1
      let l = Bin(ls, lk, lx, ll, lr) in
      Bin(add-int(1, ls), k, x, l, Tip) // +1
    - Bin(rs, rk, rx, rl, rr) =>
      // -2
      if gt-int(rs, mul-int(_delta, ls)) {
        match rl, rr {
        - Bin(rls, rlk, rlx, rll, rlr), Bin(rrs, rrk, rrx, rrl, rrr) =>
          // -4
          let rlls on rll = size(rll) in
          let rlrs on rlr = size(rlr) in
          let rl = Bin(rls, rlk, rlx, rll, rlr) in
          let rr = Bin(rrs, rrk, rrx, rrl, rrr) in
          let l = Bin(ls, lk, lx, ll, lr) in
          if lt-int(rls, mul-int(_ratio, rrs)) {
            let s' = add-int(1, add-int(ls, rs)) in
            let rs' = add-int(1, add-int(rs, rls)) in
            Bin(s', rk, rx, Bin(rs', k, x, l, rl), rr) // +1
          } else {
            let s' = add-int(1, add-int(ls, rs)) in
            let ls' = add-int(1, add-int(ls, rlls)) in
            let rs' = add-int(1, add-int(rrs, rlrs)) in
            Bin(s', rlk, rlx, Bin(ls', k, x, l, rll), Bin(rs', rk, rx, rlr, rr)) // +2
          }
        - _, _ =>
          let tip = core.system.admit(_, "failure in core.dict._balanceL") in
          Bin(rs, rk, rx, Bin(rs, rk, rx, tip, tip), Bin(rs, rk, rx, tip, tip)) // +1
        }
      } else {
        let s' = add-int(1, add-int(ls, rs)) in
        let l = Bin(ls, lk, lx, ll, lr) in
        let r = Bin(rs, rk, rx, rl, rr) in
        Bin(s', k, x, l, r) // +1
      }
    }
  }
}

define _unsafeGetPtr[a](d: &a): int {
  magic cast(&a, int, d)
}
