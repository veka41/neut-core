import {
  this.either {Left, Right},
  this.int.show {%ld},
  this.list,
  this.rune,
  this.rune.eq {eq-rune, ne-rune},
  this.text {_get-rune-size, _get-rune-size-end, drop-N, drop-end-while-N, find-end, take-end-N},
  this.text.io {print, printf},
  this.unit {Unit, unit},
}

define zen(): unit {
  let p = "/Users/foo/some-file.txt" in
  let q =
    drop-end-while-N(p, function (r) {
      ne-rune(r, `U`)
    })
  in
  printf("q: {}\n", [q]);
  printf("drop: {}\n", [drop-N(p, 3)]);
  let result =
    find-end(p, function (r) {
      eq-rune(r, `.`)
    })
  in
  match result {
  | Right(v) =>
    printf("find-index: {}\n", [%ld(v)]);
    printf("ext: {}\n", [take-end-N(p, add-int(v, 1))]);
  | Left(_) =>
    print("not found\n");
  };
  let t = "Ã”" in
  let len = this.text.text-byte-length(t) in
  let s1 = _get-rune-size-end(t, sub-int(len, 1)) in
  let s2 = _get-rune-size(t, 0) in
  printf("byte-length: {}\n", [%ld(len)]);
  printf("s1: {}\n", [%ld(s1)]);
  printf("s2: {}\n", [%ld(s2)]);
  Unit
}

define main(): unit {
  zen()
}
