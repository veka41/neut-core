import {
  this.bool {True},
  this.foreign {THREAD_COND_SIZE, THREAD_MUTEX_SIZE},
  this.int.show {%ld},
  this.list {for, list},
  this.process,
  this.rune.show {as-show},
  this.text {drop, pack, reverse, unpack},
  this.text.io {printf},
  this.text.show,
  this.unit {Unit, unit},
  this.word,
}

constant my-bool: tau {
  this.bool.bool
}

define make-bool(): my-bool {
  True
}

constant some-int-list: list(int) {
  [1, 2, 3]
}

define increment(x: int): int {
  add-int(x, 1)
}

define main(): unit {
  // print-int(this.word.size)
  this.process.zen()
}

define zen(): unit {
  // printf("SEEK_END: {}\n", [%ld(SEEK_END)]);
  printf("thread mutex size: {}\n", [%ld(THREAD_MUTEX_SIZE)]);
  printf("thread cond size: {}\n", [%ld(THREAD_COND_SIZE)]);
  printf("word size: {}\n", [%ld(this.word.size)]);
  let my-text = reverse("„ÅÇ„ÅÑ„ÅÜ„Åà„Åä„ÄÇhello, world!") in
  let len on my-text = this.text.length(my-text) in
  let char-seq on my-text = unpack(my-text) in
  let _ = my-text in
  for(char-seq, function (ch) {
    printf("{}", [as-show::show(ch)])
  });
  printf("len: {}\n", [%ld(len)]);
  let char-seq-2 on char-seq = pack(char-seq) in
  let _ = char-seq in
  printf("{}\n", [char-seq-2]);
  let tmp = drop(10, *"„ÅÇ„ÅÑ„ÅÜ„Åàüíå„Åä„Åã„Åç„Åè„Åë„Åì‚≠ê„Åï„Åó„Åô„Åõ\n\\aoeu„Åù„Åü„Å°„Å§„Å¶„Å®") in
  printf("{}\n", [this.text.show.as-show::show(tmp)]);
  // let t2 on tmp = append(tmp, "st") in
  // let b on t1, t2 = eq-text(t1, t2) in
  // use this.bool.show.as-show {show} in
  // // let Show(f) = as-show in
  // printf("{}\n", [show(b)]);
  Unit
}
