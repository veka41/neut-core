import {
- this.bool
- this.cell
- this.channel [channel, new-channel, send, receive]
- this.file
- this.function
- this.int8-array
- this.list [list, map, minimum, maximum]
- this.pair
- this.system
- this.text [text]
- this.unit [unit, Unit]
- this.void
- FD
- FF
- FM
- Q
- ext
- f
- fa
- m
- magic
- tio
- vector [vector, zip-with]
}

define main(): unit {
  let mat: m.matrix(int) =
    m.new([
      [1, 2, 3],
      [4, 5, 6]
    ])
  in
  let _ on mat = m.print-mat(tio.print-int, mat) in
  // let v: vector(int) = vector.new([1, 2, 3, 4]) in
  // let _ on v =
  //   vector.for-each(v, (x) => {
  //     // tio.print("hello ");
  //     tio.print-int(x)
  //     // tio.print("\n")
  //   })
  // in
  // // let _ on v = vector.swap(v, 1, 2) in
  // // let _ on v = vector.next(v) in
  // // let _ on v =
  // //   vector.for-each(v, (x) => {
  // //     tio.print("hello ");
  // //     tio.print-int(x);
  // //     tio.print("\n")
  // //   })
  // // in
  // let newvec on v =
  //   vector.for(v, (x) => {
  //     add-int(x, 10)
  //   })
  // in
  // let vec3 on v, newvec = zip-with(add-int, v, newvec) in
  // let _ on vec3 =
  //   vector.for-each(vec3, (x) => {
  //     tio.print("hello ");
  //     tio.print-int(x);
  //     tio.print("\n")
  //   })
  // in
  // let _ = v in
  Unit
  // let mat =
  //   m.new([
  //     [1, 2.812374, 3],
  //     [4, 5, 6]
  //   ])
  // in
  // let mat2 =
  //   m.new([
  //     [31.2, 2.812, 8],
  //     [-1234, -5, 23]
  //   ])
  // in
  // let sum-mat on mat, mat2 = m.add-mat(mat, mat2) in
  // let _ on sum-mat = m.print-mat(sum-mat) in
  // Unit
}
