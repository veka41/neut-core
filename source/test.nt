import {
  this.bool {True, bool},
  this.box,
  this.cell {mutate},
  this.control {discard},
  this.either {Left, Right, either},
  this.float.show {show-float},
  this.int {power-int},
  this.int.show {show-int},
  this.list {length, list},
  this.pair {Pair, pair},
  this.random {random-float},
  this.rune {to-int},
  this.text,
  this.text.io {print, printf},
  this.unit {Unit, unit},
  this.vector {create, for, slice, vector},
}

define with-cell(i: int): int {
  let c = new-cell(i) in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 21)
    })
  in
  this.cell.extract(c)
}

define box-int(i: int): meta int {
  magic cast(int, meta int, i)
}

define use-rune(r: rune): unit {
  match r {
  | `a` =>
    print("found a\n")
  | `あ` =>
    print("found あ\n")
  | _ =>
    print("found other\n")
  }
}

define zen(): unit {
  let yo: pair(int, bool) = Pair(3, True) in
  // let Pair(_, y) on yo = *yo in
  let tmp on yo = *yo in
  let Pair(_, _) = tmp in
  let xs: vector(int) =
    create(10, function (i) {
      i
    })
  in
  let val = random-float(3.8, 10.2) in
  printf("random-float: {}\n", [show-float(val)]);
  let ys = slice(xs, -2, 8) in
  for(ys, function (y, _) {
    printf("{}\n", [show-int(y)])
  });
  let k: int = 2 in
  let val = power-int(k, 5) in
  printf("{}\n", [show-int(val)]);
  let foo = `x` in
  use-rune(foo);
  match foo {
  | `a` =>
    print("a\n")
  | `b` =>
    print("b\n")
  | `あ` =>
    print("lorem ipsum\n")
  | _ =>
    print("other\n")
  };
  let k: rune = `x` in
  match k {
  | `x` =>
    print("test")
  | _ =>
    Unit
  };
  let p: either(pair(rune, type), type) = Left(Pair(`x`, type)) in
  match p {
  | Right(_) =>
    print("right\n")
  | Left(Pair(`a`, _)) =>
    print("pair-a\n")
  | Left(Pair(`x`, _)) =>
    print("pair-x\n")
  | Left(Pair(_, _)) =>
    print("pair-x\n")
  };
  let !xs: list(int) = [1, 2, 3] in
  letbox len on !xs =
    discard(*!xs);
    box-int(length(!xs))
  in
  let _ = discard(!xs) in
  let _ = discard(!xs) in
  let _ = discard(!xs) in
  printf("len: {}\n", [show-int(len)]);
  printf("rune-as-int: {}\n", [show-int(to-int(foo))]);
  print("hello, world\n");
  Unit
}

define main(): unit {
  zen()
}
