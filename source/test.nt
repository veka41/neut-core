import {
- this.bool
- this.cell
- this.channel [channel, new-channel, send, receive]
- this.except [Pass, Fail]
- this.errno [Errno]
- this.file [open, close]
- this.function
- this.float [as-semiring]
- this.int8-array
- this.list [list, map, minimum, maximum, reverse, sum]
- this.pair
- this.int [as-monoid, as-loset]
- this.system
- this.text [text]
- this.unit [unit, Unit]
- this.void
- dict [dict, size, empty, insert, Dict, fromLoset]
- FD
- FF
- FM
- Q
- ext
- f
- fa
- m
- magic
- tio
- vector [vector, zip-with]
}

define main(): unit {
  let dict.Dict of { empty, insert, lookup, delete } = fromLoset(as-loset) in
  let d: dict(int, &text) = empty in
  // let d: dict(int, &text) = dict.empty() in
  let d = insert(10, "hello\n", d) in
  let d = insert(20, "this\n", d) in
  let d = insert(30, "yo\n", d) in
  let key = 10 in
  let _ on d, key =
    let val = lookup(key, d) in
    match val {
    - Fail(_) =>
      tio.print("found nothing\n")
    - Pass(val) =>
      tio.print(*val)
    }
  in
  let d = delete(key, d) in
  let key = 10 in
  let _ on d, key =
    let val = lookup(key, d) in
    match val {
    - Fail(_) =>
      tio.print("found nothing\n")
    - Pass(val) =>
      tio.print(*val)
    }
  in
  // let val = sum(as-monoid, [1, 2, 3]) in
  // tio.print-int(val);
  // let f = open("test", FF.for-r(), FM.default-file-mode()) in
  // match f {
  // - Fail(Errno(num)) =>
  //   tio.print("fail: ");
  //   tio.print-int(num);
  //   tio.print("\n")
  // - Pass(_) =>
  //   Unit
  // };
  // let g = close(magic.cast(int, _, 30)) in
  // match g {
  // - Fail(Errno(num)) =>
  //   tio.print("fail: ");
  //   tio.print-int(num);
  //   tio.print("\n")
  // - Pass(_) =>
  //   Unit
  // };
  // let mat1: m.matrix(int) =
  //   m.new([
  //     reverse([1, 5, 9])
  //   ])
  // in
  // let mat2: m.matrix(float) =
  //   m.new([
  //     [8, 4, 2],
  //     [1, 3, -6],
  //     [-7, 0, 5]
  //   ])
  // in
  // let mat on mat1, mat2 = m.mul-mat(as-semiring(), mat1, mat2) in
  // let _ on mat = m.print-mat(tio.print-float, mat) in
  // let _ on mat1 = m.print-mat(tio.print-int, mat1) in
  // tio.print("\n");
  // tio.print("row-size: ");
  // let row-size on mat = m.get-row-size(mat) in
  // tio.print-int(row-size);
  // tio.print("\n");
  // tio.print("col-size: ");
  // let col-size on mat = m.get-col-size(mat) in
  // tio.print-int(col-size);
  // tio.print("\n");
  // let val on mat = m.access(mat, 2, 1) in
  // tio.print-int(val);
  // let v: vector(int) = vector.new([1, 2, 3, 4]) in
  // let _ on v =
  //   vector.for-each(v, (x) => {
  //     // tio.print("hello ");
  //     tio.print-int(x)
  //     // tio.print("\n")
  //   })
  // in
  // // let _ on v = vector.swap(v, 1, 2) in
  // // let _ on v = vector.next(v) in
  // // let _ on v =
  // //   vector.for-each(v, (x) => {
  // //     tio.print("hello ");
  // //     tio.print-int(x);
  // //     tio.print("\n")
  // //   })
  // // in
  // let newvec on v =
  //   vector.for(v, (x) => {
  //     add-int(x, 10)
  //   })
  // in
  // let vec3 on v, newvec = zip-with(add-int, v, newvec) in
  // let _ on vec3 =
  //   vector.for-each(vec3, (x) => {
  //     tio.print("hello ");
  //     tio.print-int(x);
  //     tio.print("\n")
  //   })
  // in
  // let _ = v in
  Unit
  // let mat =
  //   m.new([
  //     [1, 2.812374, 3],
  //     [4, 5, 6]
  //   ])
  // in
  // let mat2 =
  //   m.new([
  //     [31.2, 2.812, 8],
  //     [-1234, -5, 23]
  //   ])
  // in
  // let sum-mat on mat, mat2 = m.add-mat(mat, mat2) in
  // let _ on sum-mat = m.print-mat(sum-mat) in
  // Unit
}
