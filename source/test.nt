import {
  this.box,
  this.cell {mutate},
  this.control {discard},
  this.int.show {show-int},
  this.list {length, list},
  this.rune {to-int},
  this.text,
  this.text.io {print, printf},
  this.unit {Unit, unit},
}

define with-cell(i: int): int {
  let c = new-cell(i) in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 1)
    })
  in
  let _ on c =
    mutate(c, function (x) {
      add-int(x, 21)
    })
  in
  this.cell.extract(c)
}

define box-int(i: int): meta int {
  magic cast(int, meta int, i)
}

define zen(): unit {
  let foo = `b` in
  let !xs: list(int) = [1, 2, 3] in
  letbox len on !xs =
    discard(*!xs);
    box-int(length(!xs))
  in
  let _ = discard(!xs) in
  let _ = discard(!xs) in
  let _ = discard(!xs) in
  printf("len: {}\n", [show-int(len)]);
  printf("rune-as-int: {}\n", [show-int(to-int(foo))]);
  print("hello, world\n");
  Unit
}

define main(): unit {
  zen()
}
