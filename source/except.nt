import {
- this.bool [bool, True, False]
- this.unit [unit, Unit]
}

data except(a: tau, b: tau) {
- Fail(a)
- Pass(b)
}

inline option(a: tau): tau {
  except(unit, a)
}

inline none-internal(a: tau): option(a) {
  Fail(Unit)
}

inline some-internal(a: tau, x: a): option(a) {
  Pass(x)
}

define is-None[a](x: option(a)): bool {
  match x {
  - Fail(_) =>
    True
  - Pass(_) =>
    False
  }
}

define is-Some[a](x: option(a)): bool {
  match x {
  - Fail(_) =>
    False
  - Pass(_) =>
    True
  }
}

define from-option[a](x: a, my: option(a)): a {
  match my {
  - Pass(y) =>
    y
  - Fail(_) =>
    x
  }
}
