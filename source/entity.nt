import {
  Lo {Loset, loset},
  O {EQ},
  this.bool {False, True, bool},
}

data entity(a) {
| Entity(
    // no entity without identity
    identity: (a, a) -> bool,
  )
}

inline from-loset<a>(x: loset(a)): entity(a) {
  let Loset of {cmp} = x in
  Entity of {
    identity = {
      function (x, y) {
        match cmp(x, y) {
        | EQ =>
          True
        | _ =>
          False
        }
      }
    },
  }
}

inline comap<a, b>(f: (a) -> b, e: entity(b)): entity(a) {
  Entity of {
    identity = {
      function (x, y) {
        e::identity(f(x), f(y))
      }
    },
  }
}
