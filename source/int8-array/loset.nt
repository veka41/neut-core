import {
  O {EQ, GT, LT},
  this.bool {False, True, bool},
  this.int8-array {_get-content-pointer, int8-array, int8-array-length},
  this.loset {Loset, loset},
  this.memory {load-int8},
}

constant _cmp-ptr-t: type {
  (ptr1: int, ptr2: int, index: int, to: int) -> bool
}

constant _cmp-array-t: type {
  (t1: &int8-array, t2: &int8-array) -> bool
}

inline _cmp-int8-array(cmp: (int8, int8) -> bool): _cmp-ptr-t {
  define self(ptr1: int, ptr2: int, index: int, to: int): bool {
    if eq-int(index, to) {
      True
    } else {
      let v1 = load-int8(add-int(ptr1, index)) in
      let v2 = load-int8(add-int(ptr2, index)) in
      if cmp(v1, v2) {
        self(ptr1, ptr2, add-int(index, 1), to)
      } else {
        False
      }
    }
  }
}

define _lt-int8-array(ptr1: int, ptr2: int, index: int, to: int): bool {
  _cmp-int8-array(lt-int8)(ptr1, ptr2, index, to)
}

define _le-int8-array(ptr1: int, ptr2: int, index: int, to: int): bool {
  _cmp-int8-array(le-int8)(ptr1, ptr2, index, to)
}

define _gt-int8-array(ptr1: int, ptr2: int, index: int, to: int): bool {
  _cmp-int8-array(gt-int8)(ptr1, ptr2, index, to)
}

define _ge-int8-array(ptr1: int, ptr2: int, index: int, to: int): bool {
  _cmp-int8-array(ge-int8)(ptr1, ptr2, index, to)
}

inline cmp-int8-array(cmp: _cmp-ptr-t): _cmp-array-t {
  function (t1: &int8-array, t2: &int8-array): bool {
    let len1 = int8-array-length(t1) in
    let len2 = int8-array-length(t2) in
    if ne-int(len1, len2) {
      False
    } else {
      let ptr1 = _get-content-pointer(t1) in
      let ptr2 = _get-content-pointer(t2) in
      cmp(ptr1, ptr2, 0, len1)
    }
  }
}

define lt-int8-array(t1: &int8-array, t2: &int8-array): bool {
  cmp-int8-array(_lt-int8-array)(t1, t2)
}

define le-int8-array(t1: &int8-array, t2: &int8-array): bool {
  cmp-int8-array(_le-int8-array)(t1, t2)
}

define gt-int8-array(t1: &int8-array, t2: &int8-array): bool {
  cmp-int8-array(_gt-int8-array)(t1, t2)
}

define ge-int8-array(t1: &int8-array, t2: &int8-array): bool {
  cmp-int8-array(_ge-int8-array)(t1, t2)
}

constant as-loset: loset(&int8-array) {
  Loset of {
    cmp = {
      function (x, y) {
        if gt-int8-array(x, y) {
          GT
        } else-if lt-int8-array(x, y) {
          LT
        } else {
          EQ
        }
      }
    },
  }
}
