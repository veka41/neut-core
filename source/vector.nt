import {
  Magic,
  Mem,
  Word,
  this.bool,
  this.control {loop},
  this.either {from-option},
  this.external {free, malloc},
  this.int.ord {as-ord-N},
  this.list {Cons, Nil, list, minimum},
  this.unit {Unit, unit},
}

data _vector-info {
| _Vector-Info(
    word-size: int,
    from-ptr: int,
    to-ptr: int,
    type-ptr: int,
    content-ptr: int,
  )
}

define _discard-vector-content(ptr: int, elem-type: type, counter: int, size: int): unit {
  if eq-int(counter, size) {
    Unit
  } else {
    let u = Word.size in
    let _ = Magic.cast(int, elem-type, Mem.load-int(add-int(ptr, mul-int(counter, u)))) in
    _discard-vector-content(ptr, elem-type, add-int(counter, 1), size)
  }
}

define _copy-vector-content(source-pointer: int, target-pointer: int, elem-type: type, counter: int, size: int): unit {
  if eq-int(counter, size) {
    Unit
  } else {
    let u = Word.size in
    let original = Magic.cast(int, &elem-type, Mem.load-int(add-int(source-pointer, mul-int(counter, u)))) in
    let clone = *original in
    Mem.store-int(Magic.cast(elem-type, int, clone), add-int(target-pointer, mul-int(counter, u)));
    _copy-vector-content(source-pointer, target-pointer, elem-type, add-int(counter, 1), size)
  }
}

nominal {
  _vector-internal: type,
}

data vector(_: type) {
| _Vector(_vector-internal)
}

define _get-vector-info<a>(xs: &vector(a)): _vector-info {
  let from-ptr = Magic.cast(&vector(a), int, xs) in
  let word-size = Word.size in
  let to-ptr = add-int(from-ptr, word-size) in
  let type-ptr = add-int(from-ptr, mul-int(word-size, 2)) in
  let base-content-ptr = add-int(from-ptr, mul-int(word-size, 3)) in
  let from = Mem.load-int(from-ptr) in
  let content-ptr = add-int(base-content-ptr, mul-int(word-size, from)) in
  _Vector-Info of {word-size, from-ptr, to-ptr, type-ptr, content-ptr}
}

resource _vector-internal {
  function (ptr: int) {
    let base-ptr = Magic.cast(int, &vector(int), ptr) in
    let _Vector-Info of {from-ptr, to-ptr, type-ptr, content-ptr} = _get-vector-info(base-ptr) in
    let from: int = Mem.load-int(from-ptr) in
    let to: int = Mem.load-int(to-ptr) in
    let size = sub-int(to, from) in
    let elem-type = Magic.cast(int, type, Mem.load-int(type-ptr)) in
    _discard-vector-content(content-ptr, elem-type, 0, size);
    Magic.cast(unit, int, free(from-ptr))
  },
  function (ptr: int) {
    let base-ptr = Magic.cast(int, &vector(int), ptr) in
    let _Vector-Info of {word-size, from-ptr, to-ptr, type-ptr, content-ptr} = _get-vector-info(base-ptr) in
    let from: int = Mem.load-int(from-ptr) in
    let to: int = Mem.load-int(to-ptr) in
    let size = sub-int(to, from) in
    let elem-type: type = Magic.cast(int, type, Mem.load-int(type-ptr)) in
    let target-ptr = malloc(mul-int(word-size, add-int(size, 3))) in
    Mem.store-int(0, target-ptr);
    Mem.store-int(size, add-int(target-ptr, word-size));
    Mem.store-int(Magic.cast(type, int, elem-type), add-int(target-ptr, mul-int(word-size, 2)));
    _copy-vector-content(content-ptr, add-int(target-ptr, mul-int(word-size, 3)), elem-type, 0, size);
    target-ptr
  },
}

inline create<a>(len: int, gen: (int) -> a): vector(a) {
  let word-size = Word.size in
  let ptr0 = malloc(mul-int(word-size, add-int(3, len))) in
  let ptr1 = add-int(ptr0, word-size) in
  let ptr2 = add-int(ptr0, mul-int(word-size, 2)) in
  let ptr3 = add-int(ptr0, mul-int(word-size, 3)) in
  Mem.store-int(0, ptr0);
  Mem.store-int(len, ptr1);
  Mem.store-int(Magic.cast(type, int, a), ptr2);
  let store-values =
    define self(index: int): unit {
      if ge-int(index, len) {
        Unit
      } else {
        let v = gen(index) in
        Mem.store-int(Magic.cast(a, int, v), add-int(ptr3, mul-int(index, word-size)));
        self(add-int(index, 1))
      }
    }
  in
  let _ = store-values(0) in
  magic cast(int, _, ptr0)
}

inline _access<a>(xs: &vector(a), i: int): &a {
  let _Vector-Info of {content-ptr, word-size} = _get-vector-info(xs) in
  let elem-address = add-int(content-ptr, mul-int(word-size, i)) in
  Magic.cast(int, &a, Mem.load-int(elem-address))
}

define length<a>(xs: &vector(a)): int {
  let _Vector-Info of {from-ptr, to-ptr} = _get-vector-info(xs) in
  let from = Mem.load-int(from-ptr) in
  let to = Mem.load-int(to-ptr) in
  sub-int(to, from)
}

inline for-each<a, b>(xs: vector(a), f: (a) -> b): vector(b) {
  let word-size = Word.size in
  let ptr0 = magic cast(vector(a), int, xs) in
  let ptr1 = add-int(ptr0, word-size) in
  let ptr2 = add-int(ptr0, mul-int(word-size, 2)) in
  let ptr3 = add-int(ptr0, mul-int(word-size, 3)) in
  let from = Mem.load-int(ptr0) in
  let to = Mem.load-int(ptr1) in
  Mem.store-int(Magic.cast(type, int, b), ptr2);
  let store-values =
    define self(index: int): unit {
      if ge-int(index, to) {
        Unit
      } else {
        let value-ptr = add-int(ptr3, mul-int(index, word-size)) in
        let old-value = Mem.load-int(value-ptr) in
        let new-value = f(Magic.cast(int, a, old-value)) in
        Mem.store-int(Magic.cast(b, int, new-value), value-ptr);
        self(add-int(index, 1))
      }
    }
  in
  store-values(from);
  magic cast(int, vector(b), ptr0)
}

inline for-each-N<a, b>(xs: &vector(a), f: (&a) -> b): vector(b) {
  let len = length(xs) in
  create(len, function (i) {
    f(_access(xs, i))
  })
}

inline for<a>(xs: vector(a), f: (a) -> unit): unit {
  let word-size = Word.size in
  let ptr0 = magic cast(vector(a), int, xs) in
  let ptr1 = add-int(ptr0, word-size) in
  let ptr3 = add-int(ptr0, mul-int(word-size, 3)) in
  let from = Mem.load-int(ptr0) in
  let to = Mem.load-int(ptr1) in
  let loop =
    define self(index: int): unit {
      if ge-int(index, to) {
        Unit
      } else {
        let value-ptr = add-int(ptr3, mul-int(index, word-size)) in
        let old-value = Mem.load-int(value-ptr) in
        f(Magic.cast(int, a, old-value));
        self(add-int(index, 1))
      }
    }
  in
  loop(from)
}

inline for-N<a>(xs: &vector(a), f: (&a) -> unit): unit {
  let len = length(xs) in
  loop(len, function (i) {
    f(_access(xs, i))
  })
}

inline fold-left-N<elem-type, result-type>(
  acc: result-type,
  xs: &vector(elem-type),
  consumer: (result-type, &elem-type) -> result-type,
): result-type {
  let sz = length(xs) in
  let helper =
    define loop(cursor: int, acc, xs) {
      if eq-int(cursor, sz) {
        acc
      } else {
        let y = _access(xs, cursor) in
        loop(add-int(cursor, 1), consumer(acc, y), xs)
      }
    }
  in
  helper(0, acc, xs)
}

inline zip-with-N<a, b, c>(xs: &vector(a), ys: &vector(b), f: (&a, &b) -> c): vector(c) {
  let len1 = length(xs) in
  let len2 = length(ys) in
  let min-func = minimum(as-ord-N) in
  let len-or-none = min-func([len1, len2]) in
  let len = from-option(len-or-none, 0) in
  create(len, function (i) {
    let val1 = _access(xs, i) in
    let val2 = _access(ys, i) in
    f(val1, val2)
  })
}

define from-list<a>(base-list: list(a)): vector(a) {
  let word-size = Word.size in
  let n on base-list = this.list.length(base-list) in
  let ptr0 = malloc(mul-int(word-size, add-int(3, n))) in
  let ptr1 = add-int(ptr0, word-size) in
  let ptr2 = add-int(ptr0, mul-int(word-size, 2)) in
  let ptr3 = add-int(ptr0, mul-int(word-size, 3)) in
  Mem.store-int(0, ptr0);
  Mem.store-int(n, ptr1);
  Mem.store-int(Magic.cast(type, int, a), ptr2);
  let store-values =
    define self(values: list(a), index: int): unit {
      match values {
      | Nil =>
        Unit
      | Cons(v, rest) =>
        Mem.store-int(Magic.cast(a, int, v), add-int(ptr3, mul-int(index, word-size)));
        self(rest, add-int(index, 1))
      }
    }
  in
  let _ = store-values(base-list, 0) in
  magic cast(int, _, ptr0)
}

define to-list<a>(xs: vector(a)): list(a) {
  let len on xs = length(xs) in
  let word-size = Word.size in
  let _Vector-Info of {content-ptr} on xs = _get-vector-info(xs) in
  let ptr0 = magic cast(vector(a), int, xs) in
  let loop =
    define self(index: int): list(a) {
      if ge-int(index, len) {
        Nil
      } else {
        let value-ptr = add-int(content-ptr, mul-int(index, word-size)) in
        let value = Magic.cast(int, a, Mem.load-int(value-ptr)) in
        Cons(value, self(add-int(index, 1)))
      }
    }
  in
  let result = loop(0) in
  free(ptr0);
  result
}
