import {
- this.list
- this.option
- this.product
- this.bool
}

export {
- this.queue.queue
- this.queue.empty
- this.queue.dequeue
- this.queue.enqueue
- this.queue.size
- this.queue.is-empty
}

// naive queue
define-inline queue(a: tau): tau {
  product(list(a), list(a))
}

define empty[a](): queue(a) {
  tuple([], [])
}

define dequeue[a](q: queue(a)): ?product(a, queue(a)) {
  let tuple(ls, rs) = q
  match ls, rs {
  - Nil, Nil =>
    None
  - Cons(l, ls-rest), rs =>
    Some(tuple(l, tuple(ls-rest, rs)))
  - Nil, rs =>
    dequeue(tuple(reverse(rs), []))
  }
}

define enqueue[a](x: a, q: queue(a)): queue(a) {
  let tuple(ls, rs) = q
  tuple(ls, x :< rs)
}

define size[a](q: &queue(a)): i64 {
  case q {
  - tuple(ls, rs) =>
    let l1 = length(ls)
    let l2 = length(rs)
    add-i64(l1, l2)
  }
}

define is-empty[a](q: &queue(a)): bool {
  case q {
  - tuple([], []) =>
    True
  - _ =>
    False
  }
}
