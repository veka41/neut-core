import {
- E
- Ext
- Lo {Loset, loset}
- O {EQ, GT, LT}
- Word
- this.bool
- this.field {Field, field}
- this.memory {store-int}
- this.ring {ring}
- this.semiring {semiring}
- this.text {text, text-byte-length, unsafe-get-content-pointer}
- this.text.io {print, print-int}
- this.unit {Unit, unit}
}

foreign {
- llvm.ceil.f64(float): float
- llvm.cos.f64(float): float
- llvm.exp.f64(float): float
- llvm.exp10.f64(float): float
- llvm.exp2.f64(float): float
- llvm.fabs.f64(float): float
- llvm.floor.f64(float): float
- llvm.fma.f64(float, float, float): float
- llvm.log.f64(float): float
- llvm.log10.f64(float): float
- llvm.log2.f64(float): float
- llvm.maxnum.f64(float, float): float
- llvm.minnum.f64(float, float): float
- llvm.sin.f64(float): float
- llvm.sqrt.f64(float): float
- llvm.trunc.f64(float): float
- snprintf(pointer, int, pointer): int
- sprintf(pointer, pointer): int
}

constant as-field: field(float) {
  Field of {
  - zero = 0
  - add = add-float
  - sub = sub-float
  - one = 1
  - mul = mul-float
  - div = div-float
  }
}

define as-field-opaque(): field(float) {
  Field of {
  - zero = 0
  - add = add-float
  - sub = sub-float
  - one = 1
  - mul = mul-float
  - div = div-float
  }
}

define sqrt(x: float): float {
  magic external llvm.sqrt.f64(x)
}

define exp(x: float): float {
  magic external llvm.exp.f64(x)
}

define exp2(x: float): float {
  magic external llvm.exp2.f64(x)
}

define exp10(x: float): float {
  magic external llvm.exp10.f64(x)
}

define sin(x: float): float {
  magic external llvm.sin.f64(x)
}

define cos(x: float): float {
  magic external llvm.cos.f64(x)
}

define log(x: float): float {
  magic external llvm.log.f64(x)
}

define log2(x: float): float {
  magic external llvm.log2.f64(x)
}

define log10(x: float): float {
  magic external llvm.log10.f64(x)
}

define fma(x: float, y: float, z: float): float {
  magic external llvm.fma.f64(x, y, z)
}

define fabs(x: float): float {
  magic external llvm.fabs.f64(x)
}

define minnum(x: float, y: float): float {
  magic external llvm.minnum.f64(x, y)
}

define maxnum(x: float, y: float): float {
  magic external llvm.maxnum.f64(x, y)
}

define floor(x: float): float {
  magic external llvm.floor.f64(x)
}

define ceil(x: float): float {
  magic external llvm.ceil.f64(x)
}

define trunc(x: float): float {
  magic external llvm.trunc.f64(x)
}

define sigmoid(x: float): float {
  div-float(1, add-float(1, exp(mul-float(-1, x))))
}

constant as-loset: loset(float) {
  Loset of {
  - cmp =
    (x, y) => {
      if gt-float(*x, *y) {
        GT
      } else-if lt-float(*x, *y) {
        LT
      } else {
        EQ
      }
    }
  }
}

constant as-ring: ring(float) {
  this.ring.from-field(as-field)
}

define as-ring-opaque(): ring(float) {
  this.ring.from-field-opaque(as-field)
}

constant as-semiring: semiring(float) {
  this.semiring.from-field(as-field)
}

constant as-entity: E.entity(float) {
  E.from-loset(as-loset)
}

define show(x: float): text {
  let fmt = unsafe-get-content-pointer("%lf\0") in
  let zero: int = 0 in
  let size: int = magic external snprintf(zero, zero, fmt)(x: int) in
  let ptr = Ext.malloc(add-int(size, add-int(1, mul-int(Word.size, 2)))) in
  store-int(0, ptr);
  store-int(add-int(size, 1), add-int(ptr, Word.size));
  let buffer = add-int(ptr, mul-int(Word.size, 2)) in
  let _: int = magic external sprintf(buffer, fmt)(x: int) in
  magic cast(int, text, ptr)
}

define zen(): unit {
  let txt = show(132342128431.32741825) in
  let _ on txt =
    print(txt);
    print("\n");
    let byte-len = text-byte-length(txt) in
    print-int(byte-len)
  in
  let _ = txt in
  Unit
}
