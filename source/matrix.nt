import {
- this.bool
- this.except [from-option]
- this.rig [rig, Rig]
- this.system
- this.text [text]
- this.unit [unit, Unit]
- vector [vector]
- L [list, loop]
- fa
- int
- s
- tio
}

data matrix(a) {
- Matrix of {
  - row-size: int
  - col-size: int
  - content: vector(a)
  }
}

define new[a](xs: list(list(a))): matrix(a) {
  let get-len = (xs) => { L.length(xs) } in
  let len-list on xs = L.map-noetic(get-len, xs) in
  let col-size = L.minimum(int.as-ordered())(len-list) in
  let row-size on xs = L.length(xs) in
  Matrix of {
  - row-size => row-size
  - col-size => from-option(0, col-size)
  - content => vector.new(L.concat(xs))
  }
}

define get-row-size[a](mat: &matrix(a)): int {
  tie Matrix of { row-size } = mat in
  *row-size
}

define get-col-size[a](mat: &matrix(a)): int {
  tie Matrix of { col-size } = mat in
  *col-size
}

define get-content[a](mat: &matrix(a)): &vector(a) {
  tie Matrix of { content } = mat in
  content
}

define print-mat[a](show: a -> unit, mat: &matrix(a)): unit {
  let row-size = get-row-size(mat) in
  let col-size = get-col-size(mat) in
  let content = get-content(mat) in
  loop(row-size, (row) => {
    loop(col-size, (col) => {
      let index = add-int(col, mul-int(col-size, row)) in
      let elem = vector.access(content, index) in
      show(elem);
      tio.print(" ")
    });
    tio.print("\n")
  })
}

define add-mat[a](sg: s.semigroup(a), mat1: &matrix(a), mat2: &matrix(a)): matrix(a) {
  let vec1 = get-content(mat1) in
  let vec2 = get-content(mat2) in
  let row-size = get-row-size(mat1) in
  assert "row-size(mat1) == row-size(mat2)" {
    let row-size-2 = get-row-size(mat2) in
    eq-int(row-size, row-size-2)
  };
  let col-size = get-col-size(mat1) in
  assert "col-size(mat1) == col-size(mat2)" {
    let col-size-2 = get-col-size(mat2) in
    eq-int(col-size, col-size-2)
  };
  Matrix of {
  - row-size => row-size
  - col-size => col-size
  - content =>
    let s.Semigroup of { mul } = sg in
    vector.zip-with(mul, vec1, vec2)
  }
}

define mul-mat[a](r: rig(a), mat1: &matrix(a), mat2: &matrix(a)): matrix(a) {
  let row-size-2 = get-row-size(mat2) in
  let col-size-1 = get-col-size(mat1) in
  assert "col-size(mat1) == row-size(mat2)" {
    eq-int(col-size-1, row-size-2)
  };
  let Rig of { add, mul } = r in
  admit
}
