import {
- this.bool [and]
- this.except [from-option]
- this.rig [rig, Rig]
- this.monoid [from-ring-additive]
- this.semigroup [from-monoid]
- this.ring [ring, Ring]
- this.system
- this.text [text]
- this.unit [unit, Unit]
- L [list, loop, repeat]
- fa
- int
- s
- tio
- vector [vector]
}

data matrix(a) {
- Matrix of {
  - row-size: int
  - col-size: int
  - content: vector(a)
  }
}

data overRing(a) {
- OverRing of {
  - mk: list(list(a)) -> matrix(a)
  - mkZero: (int, int) -> matrix(a)
  - add: (&matrix(a), &matrix(a)) -> matrix(a)
  - sub: (&matrix(a), &matrix(a)) -> matrix(a)
  - mkOne: int -> matrix(a)
  - mul: (&matrix(a), &matrix(a)) -> matrix(a)
  - mul-pointwise: (&matrix(a), &matrix(a)) -> matrix(a)
  }
}

inline fromRing[a](asRing: ring(a)): overRing(a) {
  let asRig = this.rig.from-ring(asRing) in
  OverRing of {
  - mk = new
  - mkZero = zero(asRing)
  - add = add-mat(asRing)
  - sub = sub-mat(asRing)
  - mkOne = one(asRing)
  - mul = mul-mat(asRig)
  - mul-pointwise = mul-mat-pointwise(asRing)
  }
}

define new[a](content-list: list(list(a))): matrix(a) {
  let get-len = (xs) => { L.length(xs) } in
  let len-list on content-list = L.map-noetic(get-len, content-list) in
  let col-size = L.minimum(int.as-loset)(len-list) in
  let row-size on content-list = L.length(content-list) in
  Matrix of {
  - row-size = row-size
  - col-size = from-option(0, col-size)
  - content = vector.new(L.concat(content-list))
  }
}

inline zero[a](asRing: ring(a)): (int, int) -> matrix(a) {
  let Ring of { zero } = asRing in
  mu _(row-size: int, col-size: int) {
    let vec-size = mul-int(row-size, col-size) in
    let content = vector.new(L.repeat(vec-size, (_) => { zero })) in
    Matrix of { row-size, col-size, content }
  }
}

inline one[a](asRing: ring(a)): int -> matrix(a) {
  let Ring of { zero, one } = asRing in
  mu _(size: int) {
    let vec-size = mul-int(size, size) in
    let content = vector.new(L.repeat(vec-size, (cursor) => {
      let rem = rem-int(cursor, add-int(size, 1)) in
      if eq-int(rem, 0) {
        one
      } else {
        zero
      }
    })) in
    Matrix of { row-size = size, col-size = size, content }
  }
}

define access[a](mat: &matrix(a), row: int, col: int): a {
  tie Matrix of { row-size, col-size, content } = mat in
  assert "0 <= row < row-size" {
    let b1 = le-int(0, row) in
    let b2 = lt-int(row, *row-size) in
    and(b1, b2)
  };
  assert "0 <= col < col-size" {
    let b1 = le-int(0, col) in
    let b2 = lt-int(col, *col-size) in
    and(b1, b2)
  };
  vector.access(content, add-int(mul-int(*col-size, row), col))
}

define get-row-size[a](mat: &matrix(a)): int {
  tie Matrix of { row-size } = mat in
  *row-size
}

define get-col-size[a](mat: &matrix(a)): int {
  tie Matrix of { col-size } = mat in
  *col-size
}

define get-content[a](mat: &matrix(a)): &vector(a) {
  tie Matrix of { content } = mat in
  content
}

define print-mat[a](show: a -> unit, mat: &matrix(a)): unit {
  let row-size = get-row-size(mat) in
  let col-size = get-col-size(mat) in
  loop(row-size, (row) => {
    loop(col-size, (col) => {
      let elem = access(mat, row, col) in
      show(elem);
      tio.print(" ")
    });
    tio.print("\n")
  })
}

inline add-mat[a](rg: ring(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  let Ring of { add } = rg in
  mu _(mat1: &matrix(a), mat2: &matrix(a)) {
    let vec1 = get-content(mat1) in
    let vec2 = get-content(mat2) in
    let row-size = get-row-size(mat1) in
    assert "row-size(mat1) == row-size(mat2)" {
      let row-size-2 = get-row-size(mat2) in
      eq-int(row-size, row-size-2)
    };
    let col-size = get-col-size(mat1) in
    assert "col-size(mat1) == col-size(mat2)" {
      let col-size-2 = get-col-size(mat2) in
      eq-int(col-size, col-size-2)
    };
    Matrix of {
    - row-size = row-size
    - col-size = col-size
    - content =
      vector.zip-with(vec1, vec2, add)
    }
  }
}

inline sub-mat[a](rg: ring(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  let Ring of { zero, add, sub } = rg in
  mu _(mat1: &matrix(a), mat2: &matrix(a)) {
    let vec1 = get-content(mat1) in
    let vec2 = get-content(mat2) in
    let row-size = get-row-size(mat1) in
    assert "row-size(mat1) == row-size(mat2)" {
      let row-size-2 = get-row-size(mat2) in
      eq-int(row-size, row-size-2)
    };
    let col-size = get-col-size(mat1) in
    assert "col-size(mat1) == col-size(mat2)" {
      let col-size-2 = get-col-size(mat2) in
      eq-int(col-size, col-size-2)
    };
    Matrix of {
    - row-size = row-size
    - col-size = col-size
    - content =
      vector.zip-with(vec1, vec2, (x, y) => { add(x, sub(zero, y)) })
    }
  }
}

inline _repeat-sum[a](r: rig(a), count: int, k: int -> a): a {
  let Rig of { zero, add } = r in
  let helper =
    mu self(acc: a, cursor: int): a {
      if ge-int(cursor, count) {
        acc
      } else {
        self(add(acc, k(cursor)), add-int(cursor, 1))
      }
    }
  in
  helper(zero, 0)
}

inline mul-mat[a](r: rig(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  let Rig of { mul } = r in
  mu _(mat1: &matrix(a), mat2: &matrix(a)) {
    let row-size-1 = get-row-size(mat1) in
    let row-size-2 = get-row-size(mat2) in
    let col-size-1 = get-col-size(mat1) in
    let col-size-2 = get-col-size(mat2) in
    assert "col-size(mat1) == row-size(mat2)" {
      eq-int(col-size-1, row-size-2)
    };
    new of {
    - content-list =
      repeat(row-size-1, (i) => {
        repeat(col-size-2, (j) => {
          _repeat-sum(r, col-size-1, (k) => {
            let a_i_k = access(mat1, i, k) in
            let b_k_j = access(mat2, k, j) in
            mul(a_i_k, b_k_j)
          })
        })
      })
    }
  }
}

inline mul-mat-pointwise[a](rg: ring(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  let Ring of { mul } = rg in
  mu _(mat1: &matrix(a), mat2: &matrix(a)) {
    let vec1 = get-content(mat1) in
    let vec2 = get-content(mat2) in
    let row-size = get-row-size(mat1) in
    assert "row-size(mat1) == row-size(mat2)" {
      let row-size-2 = get-row-size(mat2) in
      eq-int(row-size, row-size-2)
    };
    let col-size = get-col-size(mat1) in
    assert "col-size(mat1) == col-size(mat2)" {
      let col-size-2 = get-col-size(mat2) in
      eq-int(col-size, col-size-2)
    };
    Matrix of {
    - row-size = row-size
    - col-size = col-size
    - content =
      vector.zip-with(vec1, vec2, mul)
    }
  }
}

define for[a, b](mat: &matrix(a), f: a -> b): matrix(b) {
  let vec = get-content(mat) in
  Matrix of {
  - row-size = get-row-size(mat)
  - col-size = get-col-size(mat)
  - content =
    vector.for(vec, f)
  }
}

define zip-with[a, b, c](mat1: &matrix(a), mat2: &matrix(b), f: (a, b) -> c): matrix(c) {
  let r1 = get-row-size(mat1) in
  assert "row-size(mat1) == row-size(mat2)" {
    let r2 = get-row-size(mat2) in
    eq-int(r1, r2)
  };
  let c1 = get-row-size(mat1) in
  assert "col-size(mat1) == col-size(mat2)" {
    let c2 = get-row-size(mat2) in
    eq-int(c1, c2)
  };
  let vec1 = get-content(mat1) in
  let vec2 = get-content(mat2) in
  Matrix of {
  - row-size = r1
  - col-size = c1
  - content = vector.zip-with(vec1, vec2, f)
  }
}
