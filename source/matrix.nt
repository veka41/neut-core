import {
  L {iterate, list},
  TIO,
  Vector {vector},
  this.bool {and},
  this.control {loop},
  this.either {from-option},
  this.int.ord {as-ord-N},
  this.rig {rig},
  this.ring {ring},
  this.system,
  this.text,
  this.unit {unit},
}

data matrix(a) {
| Matrix(
    row-size: int,
    col-size: int,
    content: vector(a),
  )
}

define new<a>(content-list: list(list(a))): matrix(a) {
  let len-list on content-list = L.for-each-N(content-list, exact L.length) in
  let col-size = L.minimum(as-ord-N)(len-list) in
  let row-size on content-list = L.length(content-list) in
  Matrix of {
    row-size,
    col-size = from-option(col-size, 0),
    content = Vector.new(L.concat(content-list)),
  }
}

define get-row-size<a>(mat: &matrix(a)): int {
  tie Matrix of {row-size} = mat in
  *row-size
}

define get-col-size<a>(mat: &matrix(a)): int {
  tie Matrix of {col-size} = mat in
  *col-size
}

define get-content<a>(mat: &matrix(a)): &vector(a) {
  tie Matrix of {content} = mat in
  content
}

define access<a>(mat: &matrix(a), row: int, col: int): a {
  tie Matrix of {row-size, col-size, content} = mat in
  assert "0 <= row < row-size" {
    let b1 = le-int(0, row) in
    let b2 = lt-int(row, *row-size) in
    and(b1, b2)
  };
  assert "0 <= col < col-size" {
    let b1 = le-int(0, col) in
    let b2 = lt-int(col, *col-size) in
    and(b1, b2)
  };
  Vector.access(content, add-int(mul-int(*col-size, row), col))
}

define print-mat<a>(mat: &matrix(a), show: (a) -> unit): unit {
  let row-size = get-row-size(mat) in
  let col-size = get-col-size(mat) in
  loop(row-size, function (row) {
    loop(col-size, function (col) {
      let elem = access(mat, row, col) in
      show(elem);
      TIO.print(" ")
    });
    TIO.print("\n")
  })
}

inline _zero<a>(r: ring(a)): (int, int) -> matrix(a) {
  use r {zero} in
  define _(row-size: int, col-size: int): matrix(a) {
    let vec-size = mul-int(row-size, col-size) in
    let content =
      Vector.new(L.iterate(vec-size, function (_) {
        zero
      }))
    in
    Matrix of {row-size, col-size, content}
  }
}

inline _one<a>(r: ring(a)): (int) -> matrix(a) {
  use r {zero, one} in
  define _(size: int): matrix(a) {
    let vec-size = mul-int(size, size) in
    let content =
      Vector.new(L.iterate(vec-size, function (cursor) {
        let rem = rem-int(cursor, add-int(size, 1)) in
        if eq-int(rem, 0) {
          one
        } else {
          zero
        }
      }))
    in
    Matrix of {row-size = size, col-size = size, content}
  }
}

inline _add<a>(r: ring(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  use r {add} in
  define _(mat1: &matrix(a), mat2: &matrix(a)): matrix(a) {
    let vec1 = get-content(mat1) in
    let vec2 = get-content(mat2) in
    let row-size = get-row-size(mat1) in
    assert "row-size(mat1) == row-size(mat2)" {
      let row-size-2 = get-row-size(mat2) in
      eq-int(row-size, row-size-2)
    };
    let col-size = get-col-size(mat1) in
    assert "col-size(mat1) == col-size(mat2)" {
      let col-size-2 = get-col-size(mat2) in
      eq-int(col-size, col-size-2)
    };
    Matrix of {
      row-size,
      col-size,
      content = Vector.zip-with(vec1, vec2, add),
    }
  }
}

inline _sub<a>(r: ring(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  use r {sub} in
  define _(mat1: &matrix(a), mat2: &matrix(a)): matrix(a) {
    let vec1 = get-content(mat1) in
    let vec2 = get-content(mat2) in
    let row-size = get-row-size(mat1) in
    assert "row-size(mat1) == row-size(mat2)" {
      let row-size-2 = get-row-size(mat2) in
      eq-int(row-size, row-size-2)
    };
    let col-size = get-col-size(mat1) in
    assert "col-size(mat1) == col-size(mat2)" {
      let col-size-2 = get-col-size(mat2) in
      eq-int(col-size, col-size-2)
    };
    Matrix of {
      row-size,
      col-size,
      content = Vector.zip-with(vec1, vec2, sub),
    }
  }
}

inline _iterate-sum<a>(r: rig(a), count: int, k: (int) -> a): a {
  use r {zero, add} in
  let helper =
    define self(acc: a, cursor: int): a {
      if ge-int(cursor, count) {
        acc
      } else {
        self(add(acc, k(cursor)), add-int(cursor, 1))
      }
    }
  in
  helper(zero, 0)
}

inline _mul<a>(!r: rig(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  use !r {mul} in
  define _(mat1: &matrix(a), mat2: &matrix(a)): matrix(a) {
    let row-size-1 = get-row-size(mat1) in
    let row-size-2 = get-row-size(mat2) in
    let col-size-1 = get-col-size(mat1) in
    let col-size-2 = get-col-size(mat2) in
    assert "col-size(mat1) == row-size(mat2)" {
      eq-int(col-size-1, row-size-2)
    };
    new of {
      content-list = {
        iterate(row-size-1, function (i) {
          iterate(col-size-2, function (j) {
            _iterate-sum(!r, col-size-1, function (k) {
              let a_i_k = access(mat1, i, k) in
              let b_k_j = access(mat2, k, j) in
              mul(a_i_k, b_k_j)
            })
          })
        })
      },
    }
  }
}

inline _mul-pointwise<a>(r: ring(a)): (&matrix(a), &matrix(a)) -> matrix(a) {
  use r {mul} in
  define _(mat1: &matrix(a), mat2: &matrix(a)): matrix(a) {
    let vec1 = get-content(mat1) in
    let vec2 = get-content(mat2) in
    let row-size = get-row-size(mat1) in
    assert "row-size(mat1) == row-size(mat2)" {
      let row-size-2 = get-row-size(mat2) in
      eq-int(row-size, row-size-2)
    };
    let col-size = get-col-size(mat1) in
    assert "col-size(mat1) == col-size(mat2)" {
      let col-size-2 = get-col-size(mat2) in
      eq-int(col-size, col-size-2)
    };
    Matrix of {
      row-size,
      col-size,
      content = Vector.zip-with(vec1, vec2, mul),
    }
  }
}

define for<a, b>(mat: &matrix(a), f: (a) -> b): matrix(b) {
  let vec = get-content(mat) in
  Matrix of {
    row-size = get-row-size(mat),
    col-size = get-col-size(mat),
    content = Vector.for(vec, f),
  }
}

define zip-with<a, b, c>(mat1: &matrix(a), mat2: &matrix(b), f: (a, b) -> c): matrix(c) {
  let r1 = get-row-size(mat1) in
  assert "row-size(mat1) == row-size(mat2)" {
    let r2 = get-row-size(mat2) in
    eq-int(r1, r2)
  };
  let c1 = get-row-size(mat1) in
  assert "col-size(mat1) == col-size(mat2)" {
    let c2 = get-row-size(mat2) in
    eq-int(c1, c2)
  };
  let vec1 = get-content(mat1) in
  let vec2 = get-content(mat2) in
  Matrix of {
    row-size = r1,
    col-size = c1,
    content = Vector.zip-with(vec1, vec2, f),
  }
}

data trope(a) {
| Trope(
    zero: (int, int) -> matrix(a),
    one: (int) -> matrix(a),
    add: (&matrix(a), &matrix(a)) -> matrix(a),
    sub: (&matrix(a), &matrix(a)) -> matrix(a),
    mul: (&matrix(a), &matrix(a)) -> matrix(a),
    mul-pointwise: (&matrix(a), &matrix(a)) -> matrix(a),
  )
}

inline from-ring<a>(!r: ring(a)): trope(a) {
  Trope of {
    zero = _zero(!r),
    one = _one(!r),
    add = _add(!r),
    sub = _sub(!r),
    mul = _mul(this.rig.from-ring(!r)),
    mul-pointwise = _mul-pointwise(!r),
  }
}
