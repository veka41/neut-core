import {
- E
- Ext
- Lo {Loset, Loset, loset, loset}
- O {EQ, EQ, GT, GT, LT, LT}
- Word
- this.bool
- this.group {Group, group}
- this.list {Cons, Nil, list}
- this.memory {store-int}
- this.monoid {from-group, monoid}
- this.ring {Ring, ring, ring}
- this.semiring {from-ring, semiring, semiring}
- this.text {text, text-byte-length, unsafe-get-content-pointer}
- this.text.io {print, print-int}
- this.unit {Unit, unit}
}

define sum-int(xs: list(int)): int {
  let f =
    define loop(ys: list(int), acc: int): int {
      match ys {
      - Nil =>
        acc
      - Cons(z, zs) =>
        loop(zs, add-int(z, acc))
      }
    }
  in
  f(xs, 0)
}

constant as-ring: ring(int) {
  Ring of {
  - zero = 0
  - add = add-int
  - sub = sub-int
  - one = 1
  - mul = mul-int
  }
}

constant as-semiring: semiring(int) {
  from-ring(as-ring)
}

constant as-group: group(int) {
  Group of {
  - one = 0
  - mul = add-int
  - div = sub-int
  }
}

constant as-monoid: monoid(int) {
  from-group(as-group)
}

constant as-loset: loset(int) {
  Loset of {
  - cmp =
    (x, y) => {
      if gt-int(*x, *y) {
        GT
      } else-if lt-int(*x, *y) {
        LT
      } else {
        EQ
      }
    }
  }
}

constant as-entity: E.entity(int) {
  E.from-loset(as-loset)
}

foreign {
- snprintf(pointer, int, pointer): int
- sprintf(pointer, pointer): int
}

define show(x: int): text {
  let fmt = unsafe-get-content-pointer("%ld\0") in
  let zero: int = 0 in
  let size: int = magic external snprintf(zero, zero, fmt)(x: int) in
  let ptr = Ext.malloc(add-int(size, add-int(1, mul-int(Word.size, 2)))) in
  store-int(0, ptr);
  store-int(add-int(size, 1), add-int(ptr, Word.size));
  let buffer = add-int(ptr, mul-int(Word.size, 2)) in
  let _: int = magic external sprintf(buffer, fmt)(x: int) in
  magic cast(int, text, ptr)
}

define zen(): unit {
  let txt = show(51323421825) in
  let _ on txt =
    print(txt);
    print("\n");
    let byte-len = text-byte-length(txt) in
    print-int(byte-len)
  in
  let _ = txt in
  Unit
}
