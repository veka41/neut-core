import {
- this.bool
- this.list {list}
- this.ring {ring, Ring}
- this.monoid {monoid, from-group}
- this.group {group, Group}
- this.semiring {semiring, from-ring}
- E
- Lo {loset, Loset}
- O {GT, LT, EQ}
}

define sum-int(xs: list(int)): int {
  let f =
    define loop(ys: list(int), acc: int): int {
      match ys {
      - [] =>
        acc
      - z :: zs =>
        loop(zs, add-int(z, acc))
      }
    }
  in
  f(xs, 0)
}

constant as-ring: ring(int) {
  Ring of {
  - zero = 0
  - add = add-int
  - sub = sub-int
  - one = 1
  - mul = mul-int
  }
}

constant as-semiring: semiring(int) {
  from-ring(as-ring)
}

constant as-group: group(int) {
  Group of {
  - one = 0
  - mul = add-int
  - div = sub-int
  }
}

constant as-monoid: monoid(int) {
  from-group(as-group)
}

constant as-loset: loset(int) {
  Loset of {
  - cmp =
    (x, y) => {
      if gt-int(*x, *y) {
        GT
      } else-if lt-int(*x, *y) {
        LT
      } else {
        EQ
      }
    }
  }
}

constant as-entity: E.entity(int) {
  E.from-loset(as-loset)
}
