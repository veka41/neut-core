import {
- this.bool
- this.errno [report-error, system]
- this.except [Pass]
- this.list [list]
- this.text [text, unsafe-get-content-pointer]
- this.unit [unit, Unit]
- FF
- FM
- FD
- ext
}

define open(path: &text, xs: list(FF.flag), ms: list(FM.mode)): system(FD.descriptor) {
  let path' = this.text.append(path, "\0") in
  let actual-path-string on path' = unsafe-get-content-pointer(path') in
  let fd = ext.open(actual-path-string, FF.interpret(xs), FM.interpret(ms)) in
  let _ = path' in
  if lt-int(magic cast(FD.descriptor, int, fd), 0) {
    report-error()
  } else {
    Pass(fd)
  }
}

define close(f: FD.descriptor): system(unit) {
  let result = ext.close(f) in
  if eq-int(result, 0) {
    Pass(Unit)
  } else {
    report-error()
  }
}
