import {
- this.bool
- this.errno {errno, get-system-error, report-system-error, system}
- this.except {Pass}
- this.list {list}
- this.text {text, unsafe-get-content-pointer}
- this.unit {unit, Unit}
- FF
- FM
- FD
- Ext
}

define open(path: &text, xs: list(FF.flag), ms: list(FM.mode)): system(FD.descriptor) {
  let path' = this.text.append(path, "\0") in
  let actual-path-string on path' = unsafe-get-content-pointer(path') in
  let fd = Ext.open(actual-path-string, FF.interpret(xs), FM.interpret(ms)) in
  let _ = path' in
  if lt-int(magic cast(FD.descriptor, int, fd), 0) {
    report-system-error()
  } else {
    Pass(fd)
  }
}

define close(f: FD.descriptor, on-failure: (errno) -> unit): unit {
  let result = Ext.close(f) in
  if eq-int(result, 0) {
    Unit
  } else {
    on-failure(get-system-error())
  }
}
