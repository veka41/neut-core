import {
  this.bool {False, True, bool},
  this.list {Cons, fold-right, list},
  this.pair {Pair, pair},
}

data either(a, b) {
| Left(a)
| Right(b)
}

define is-left<a, b>(v: &either(a, b)): bool {
  case v {
  | Left(_) =>
    True
  | Right(_) =>
    False
  }
}

define is-right<a, b>(v: &either(a, b)): bool {
  case v {
  | Left(_) =>
    False
  | Right(_) =>
    True
  }
}

define partition<a, b>(xs: list(either(a, b))): pair(list(a), list(b)) {
  fold-right(xs, Pair([], []), function (elem, acc) {
    let Pair(ls, rs) = acc in
    match elem {
    | Left(l) =>
      Pair(Cons(l, ls), rs)
    | Right(r) =>
      Pair(ls, Cons(r, rs))
    }
  })
}
