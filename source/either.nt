import {
  this.bool {False, True, bool},
  this.unit {Unit},
}

data either(a, b) {
| Left(a)
| Right(b)
}

define is-left<a, b>(v: &either(a, b)): bool {
  case v {
  | Left(_) =>
    True
  | Right(_) =>
    False
  }
}

define is-right<a, b>(v: &either(a, b)): bool {
  case v {
  | Left(_) =>
    False
  | Right(_) =>
    True
  }
}

inline none<a>: ?a {
  Left(Unit)
}

define from-option<a>(value-or-none: ?a, fallback: a): a {
  match value-or-none {
  | Right(value) =>
    value
  | Left(_) =>
    fallback
  }
}

define to-option-from-right<a, b>(v: either(a, b)): ?b {
  match v {
  | Right(r) =>
    Right(r)
  | Left(_) =>
    none
  }
}

define to-option-from-left<a, b>(v: either(a, b)): ?a {
  match v {
  | Right(_) =>
    none
  | Left(v) =>
    Right(v)
  }
}
