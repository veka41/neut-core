import {
- this.unit [unit]
- this.channel [channel, new-channel, send, receive]
- this.magic => magic
}

define cell(a) {
  channel(a)
}

define new-cell(a: tau, x: a): cell(a) {
  let ch = new-channel(a) in
  let _ on ch = send(a, ch, x) in
  magic.cast(channel(a), cell(a), ch)
}

define mutate(a: tau, ch: &cell(a), f: a -> a): unit {
  let ch = magic.cast(&cell(a), &channel(a), ch) in
  let v = receive(a, ch) in
  send(a, ch, f(v))
}

define borrow(a: tau, ch: &cell(a), f: &a -> unit): unit {
  let ch = magic.cast(&cell(a), &channel(a), ch) in
  let v = receive(a, ch) in
  let _ on v = f(v) in
  send(a, ch, v)
}

define clone(a: tau, ch: &cell(a)): a {
  let ch = magic.cast(&cell(a), &channel(a), ch) in
  let v = receive(a, ch) in
  send(a, ch, v);
  v
}
