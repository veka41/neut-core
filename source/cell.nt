import {
- Magic
- this.channel {channel, new-channel, receive, send}
- this.unit {unit}
}

define cell(a: tau): tau {
  channel(a)
}

define new-cell<a>(x: a): cell(a) {
  let ch = new-channel() in
  let _ on ch = send(ch, x) in
  Magic.cast(channel(a), cell(a), ch)
}

define mutate<a>(ch: &cell(a), f: (a) -> a): unit {
  let ch = Magic.cast(&cell(a), &channel(a), ch) in
  let v = receive(ch) in
  send(ch, f(v))
}

define borrow<a>(ch: &cell(a), f: (&a) -> unit): unit {
  let ch = Magic.cast(&cell(a), &channel(a), ch) in
  let v = receive(ch) in
  let _ on v = f(v) in
  send(ch, v)
}

define clone<a>(ch: &cell(a)): a {
  let ch = Magic.cast(&cell(a), &channel(a), ch) in
  let v = receive(ch) in
  send(ch, v);
  v
}
