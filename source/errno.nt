import {
  this.except {Fail, except},
  this.foreign {get-errno},
  this.memory {load-int32},
  this.text {_from-c-string, text},
}

data errno {
| Errno(int)
}

define _get-errno(): int {
  let errno-ptr = get-errno() in
  // POSIX requires errno to be thread-safe
  magic cast(int32, int, load-int32(errno-ptr))
}

inline system(a: tau): tau {
  except(errno, a)
}

define get-system-error(): errno {
  Errno(_get-errno())
}

define report-system-error<a>(): system(a) {
  Fail(get-system-error())
}

foreign {
  strerror(int): pointer,
}

define get-error-message(e: errno): text {
  let Errno(i) = e in
  let c-str = magic external strerror(i) in
  _from-c-string(c-str)
}
